/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a8FC x_a8FD)
        = [SomePersistField x_a8FC, SomePersistField x_a8FD]
      fromPersistValues [x1_a8FF, x2_a8FG]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a8FF
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_a8FG
      fromPersistValues x_a8FE
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a8FE))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a8FH) = [toPersistValue x_a8FH]
      persistUniqueKeys (News _title_a8FI _categoryId_a8FJ)
        = [UniqueNews _title_a8FI]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8FL) key_a8FM -> (Entity key_a8FM) value_a8FL)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a8FN value_a8FO) x_a8FP
               -> (Entity key_a8FN)
                    (case value_a8FO of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_a8FP, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_a8FN value_a8FO) x_a8FP
               -> (Entity key_a8FN)
                    (case value_a8FO of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_a8FP}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a8FQ x_a8FR)
        = [SomePersistField x_a8FQ, SomePersistField x_a8FR]
      fromPersistValues [x1_a8FT, x2_a8FU]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a8FT
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a8FU
      fromPersistValues x_a8FS
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a8FS))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a8FV x_a8FW)
        = [toPersistValue x_a8FV, toPersistValue x_a8FW]
      persistUniqueKeys (Image _header_a8FX _base64_a8FY)
        = [(UniqueImage _header_a8FX) _base64_a8FY]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8G0) key_a8G1 -> (Entity key_a8G1) value_a8G0)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a8G2 value_a8G3) x_a8G4
               -> (Entity key_a8G2)
                    (case value_a8G3 of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a8G4, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a8G2 value_a8G3) x_a8G4
               -> (Entity key_a8G2)
                    (case value_a8G3 of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a8G4}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a8G5 x_a8G6)
        = [SomePersistField x_a8G5, SomePersistField x_a8G6]
      fromPersistValues [x1_a8G8, x2_a8G9]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a8G8
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a8G9
      fromPersistValues x_a8G7
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a8G7))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a8Ga x_a8Gb)
        = [toPersistValue x_a8Ga, toPersistValue x_a8Gb]
      persistUniqueKeys (ImageBank _newsId_a8Gc _imageId_a8Gd)
        = [(UniqueImageBank _newsId_a8Gc) _imageId_a8Gd]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8Gf) key_a8Gg -> (Entity key_a8Gg) value_a8Gf)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a8Gh value_a8Gi) x_a8Gj
               -> (Entity key_a8Gh)
                    (case value_a8Gi of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a8Gj, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a8Gh value_a8Gi) x_a8Gj
               -> (Entity key_a8Gh)
                    (case value_a8Gi of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a8Gj}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_a8Gk x_a8Gl)
        = [SomePersistField x_a8Gk, SomePersistField x_a8Gl]
      fromPersistValues [x1_a8Gn, x2_a8Go]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_a8Gn
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_a8Go
      fromPersistValues x_a8Gm
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_a8Gm))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_a8Gp)
        = [toPersistValue x_a8Gp]
      persistUniqueKeys (Category _label_a8Gq _parent_a8Gr)
        = [UniqueCategory _label_a8Gq]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8Gt) key_a8Gu -> (Entity key_a8Gu) value_a8Gt)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_a8Gv value_a8Gw) x_a8Gx
               -> (Entity key_a8Gv)
                    (case value_a8Gw of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_a8Gx, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_a8Gv value_a8Gw) x_a8Gx
               -> (Entity key_a8Gv)
                    (case value_a8Gw of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_a8Gx}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(112,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  parent T.Text\n\
      \  UniqueImage test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(112,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_ajbs x_ajbt)
        = [SomePersistField x_ajbs, SomePersistField x_ajbt]
      fromPersistValues [x1_ajbv, x2_ajbw]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_ajbv
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_ajbw
      fromPersistValues x_ajbu
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_ajbu))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_ajbx) = [toPersistValue x_ajbx]
      persistUniqueKeys (News _title_ajby _categoryId_ajbz)
        = [UniqueNews _title_ajby]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajbB) key_ajbC -> (Entity key_ajbC) value_ajbB)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_ajbD value_ajbE) x_ajbF
               -> (Entity key_ajbD)
                    (case value_ajbE of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_ajbF, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_ajbD value_ajbE) x_ajbF
               -> (Entity key_ajbD)
                    (case value_ajbE of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_ajbF}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_ajbG x_ajbH)
        = [SomePersistField x_ajbG, SomePersistField x_ajbH]
      fromPersistValues [x1_ajbJ, x2_ajbK]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_ajbJ
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ajbK
      fromPersistValues x_ajbI
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_ajbI))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_ajbL x_ajbM)
        = [toPersistValue x_ajbL, toPersistValue x_ajbM]
      persistUniqueKeys (Image _header_ajbN _base64_ajbO)
        = [(UniqueImage _header_ajbN) _base64_ajbO]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajbQ) key_ajbR -> (Entity key_ajbR) value_ajbQ)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ajbS value_ajbT) x_ajbU
               -> (Entity key_ajbS)
                    (case value_ajbT of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_ajbU, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ajbS value_ajbT) x_ajbU
               -> (Entity key_ajbS)
                    (case value_ajbT of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_ajbU}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_ajbV x_ajbW)
        = [SomePersistField x_ajbV, SomePersistField x_ajbW]
      fromPersistValues [x1_ajbY, x2_ajbZ]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_ajbY
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_ajbZ
      fromPersistValues x_ajbX
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ajbX))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_ajc0 x_ajc1)
        = [toPersistValue x_ajc0, toPersistValue x_ajc1]
      persistUniqueKeys (ImageBank _newsId_ajc2 _imageId_ajc3)
        = [(UniqueImageBank _newsId_ajc2) _imageId_ajc3]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajc5) key_ajc6 -> (Entity key_ajc6) value_ajc5)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ajc7 value_ajc8) x_ajc9
               -> (Entity key_ajc7)
                    (case value_ajc8 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_ajc9, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ajc7 value_ajc8) x_ajc9
               -> (Entity key_ajc7)
                    (case value_ajc8 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_ajc9}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_ajca x_ajcb)
        = [SomePersistField x_ajca, SomePersistField x_ajcb]
      fromPersistValues [x1_ajcd, x2_ajce]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_ajcd
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_ajce
      fromPersistValues x_ajcc
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_ajcc))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_ajcf)
        = [toPersistValue x_ajcf]
      persistUniqueKeys (Category _label_ajcg _parent_ajch)
        = [UniqueCategory _label_ajcg]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajcj) key_ajck -> (Entity key_ajck) value_ajcj)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_ajcl value_ajcm) x_ajcn
               -> (Entity key_ajcl)
                    (case value_ajcm of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_ajcn, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_ajcl value_ajcm) x_ajcn
               -> (Entity key_ajcl)
                    (case value_ajcm of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_ajcn}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text, testKeyParent :: !T.Text}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueImage T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ T.Text) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_ajco x_ajcp)
        = [SomePersistField x_ajco, SomePersistField x_ajcp]
      fromPersistValues [x1_ajcr, x2_ajcs]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_ajcr
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_ajcs
      fromPersistValues x_ajcq
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_ajcq))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueImage x_ajct)
        = [toPersistValue x_ajct]
      persistUniqueKeys (TestKey _test_ajcu _parent_ajcv)
        = [UniqueImage _test_ajcu]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajcx) key_ajcy -> (Entity key_ajcy) value_ajcx)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_ajcz value_ajcA) x_ajcB
               -> (Entity key_ajcz)
                    (case value_ajcA of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_ajcB, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_ajcz value_ajcA) x_ajcB
               -> (Entity key_ajcz)
                    (case value_ajcA of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_ajcB}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey T.Text where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(112,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  parent T.Text\n\
      \  UniqueTestKey test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                     (ConstraintNameDB (T.pack "unique_test_key")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(112,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                        (ConstraintNameDB (T.pack "unique_test_key")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_ajyx x_ajyy)
        = [SomePersistField x_ajyx, SomePersistField x_ajyy]
      fromPersistValues [x1_ajyA, x2_ajyB]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_ajyA
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_ajyB
      fromPersistValues x_ajyz
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_ajyz))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_ajyC) = [toPersistValue x_ajyC]
      persistUniqueKeys (News _title_ajyD _categoryId_ajyE)
        = [UniqueNews _title_ajyD]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajyG) key_ajyH -> (Entity key_ajyH) value_ajyG)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_ajyI value_ajyJ) x_ajyK
               -> (Entity key_ajyI)
                    (case value_ajyJ of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_ajyK, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_ajyI value_ajyJ) x_ajyK
               -> (Entity key_ajyI)
                    (case value_ajyJ of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_ajyK}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_ajyL x_ajyM)
        = [SomePersistField x_ajyL, SomePersistField x_ajyM]
      fromPersistValues [x1_ajyO, x2_ajyP]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_ajyO
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ajyP
      fromPersistValues x_ajyN
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_ajyN))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_ajyQ x_ajyR)
        = [toPersistValue x_ajyQ, toPersistValue x_ajyR]
      persistUniqueKeys (Image _header_ajyS _base64_ajyT)
        = [(UniqueImage _header_ajyS) _base64_ajyT]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajyV) key_ajyW -> (Entity key_ajyW) value_ajyV)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ajyX value_ajyY) x_ajyZ
               -> (Entity key_ajyX)
                    (case value_ajyY of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_ajyZ, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ajyX value_ajyY) x_ajyZ
               -> (Entity key_ajyX)
                    (case value_ajyY of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_ajyZ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_ajz0 x_ajz1)
        = [SomePersistField x_ajz0, SomePersistField x_ajz1]
      fromPersistValues [x1_ajz3, x2_ajz4]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_ajz3
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_ajz4
      fromPersistValues x_ajz2
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ajz2))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_ajz5 x_ajz6)
        = [toPersistValue x_ajz5, toPersistValue x_ajz6]
      persistUniqueKeys (ImageBank _newsId_ajz7 _imageId_ajz8)
        = [(UniqueImageBank _newsId_ajz7) _imageId_ajz8]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajza) key_ajzb -> (Entity key_ajzb) value_ajza)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ajzc value_ajzd) x_ajze
               -> (Entity key_ajzc)
                    (case value_ajzd of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_ajze, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ajzc value_ajzd) x_ajze
               -> (Entity key_ajzc)
                    (case value_ajzd of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_ajze}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_ajzf x_ajzg)
        = [SomePersistField x_ajzf, SomePersistField x_ajzg]
      fromPersistValues [x1_ajzi, x2_ajzj]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_ajzi
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_ajzj
      fromPersistValues x_ajzh
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_ajzh))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_ajzk)
        = [toPersistValue x_ajzk]
      persistUniqueKeys (Category _label_ajzl _parent_ajzm)
        = [UniqueCategory _label_ajzl]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajzo) key_ajzp -> (Entity key_ajzp) value_ajzo)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_ajzq value_ajzr) x_ajzs
               -> (Entity key_ajzq)
                    (case value_ajzr of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_ajzs, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_ajzq value_ajzr) x_ajzs
               -> (Entity key_ajzq)
                    (case value_ajzr of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_ajzs}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text, testKeyParent :: !T.Text}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueTestKey T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ T.Text) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                      (ConstraintNameDB (T.pack "unique_test_key")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_ajzt x_ajzu)
        = [SomePersistField x_ajzt, SomePersistField x_ajzu]
      fromPersistValues [x1_ajzw, x2_ajzx]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_ajzw
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_ajzx
      fromPersistValues x_ajzv
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_ajzv))
      persistUniqueToFieldNames UniqueTestKey {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueTestKey x_ajzy)
        = [toPersistValue x_ajzy]
      persistUniqueKeys (TestKey _test_ajzz _parent_ajzA)
        = [UniqueTestKey _test_ajzz]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ajzC) key_ajzD -> (Entity key_ajzD) value_ajzC)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_ajzE value_ajzF) x_ajzG
               -> (Entity key_ajzE)
                    (case value_ajzF of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_ajzG, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_ajzE value_ajzF) x_ajzG
               -> (Entity key_ajzE)
                    (case value_ajzF of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_ajzG}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey T.Text where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(112,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  parent T.Text Maybe\n\
      \  UniqueTestKey test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                     (ConstraintNameDB (T.pack "unique_test_key")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(112,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                        (ConstraintNameDB (T.pack "unique_test_key")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aoYJ x_aoYK)
        = [SomePersistField x_aoYJ, SomePersistField x_aoYK]
      fromPersistValues [x1_aoYM, x2_aoYN]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aoYM
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aoYN
      fromPersistValues x_aoYL
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aoYL))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aoYO) = [toPersistValue x_aoYO]
      persistUniqueKeys (News _title_aoYP _categoryId_aoYQ)
        = [UniqueNews _title_aoYP]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aoYS) key_aoYT -> (Entity key_aoYT) value_aoYS)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aoYU value_aoYV) x_aoYW
               -> (Entity key_aoYU)
                    (case value_aoYV of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aoYW, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aoYU value_aoYV) x_aoYW
               -> (Entity key_aoYU)
                    (case value_aoYV of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aoYW}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aoYX x_aoYY)
        = [SomePersistField x_aoYX, SomePersistField x_aoYY]
      fromPersistValues [x1_aoZ0, x2_aoZ1]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aoZ0
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aoZ1
      fromPersistValues x_aoYZ
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aoYZ))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aoZ2 x_aoZ3)
        = [toPersistValue x_aoZ2, toPersistValue x_aoZ3]
      persistUniqueKeys (Image _header_aoZ4 _base64_aoZ5)
        = [(UniqueImage _header_aoZ4) _base64_aoZ5]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aoZ7) key_aoZ8 -> (Entity key_aoZ8) value_aoZ7)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aoZ9 value_aoZa) x_aoZb
               -> (Entity key_aoZ9)
                    (case value_aoZa of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aoZb, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aoZ9 value_aoZa) x_aoZb
               -> (Entity key_aoZ9)
                    (case value_aoZa of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aoZb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aoZc x_aoZd)
        = [SomePersistField x_aoZc, SomePersistField x_aoZd]
      fromPersistValues [x1_aoZf, x2_aoZg]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aoZf
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aoZg
      fromPersistValues x_aoZe
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aoZe))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aoZh x_aoZi)
        = [toPersistValue x_aoZh, toPersistValue x_aoZi]
      persistUniqueKeys (ImageBank _newsId_aoZj _imageId_aoZk)
        = [(UniqueImageBank _newsId_aoZj) _imageId_aoZk]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aoZm) key_aoZn -> (Entity key_aoZn) value_aoZm)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aoZo value_aoZp) x_aoZq
               -> (Entity key_aoZo)
                    (case value_aoZp of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aoZq, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aoZo value_aoZp) x_aoZq
               -> (Entity key_aoZo)
                    (case value_aoZp of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aoZq}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aoZr x_aoZs)
        = [SomePersistField x_aoZr, SomePersistField x_aoZs]
      fromPersistValues [x1_aoZu, x2_aoZv]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aoZu
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aoZv
      fromPersistValues x_aoZt
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aoZt))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aoZw)
        = [toPersistValue x_aoZw]
      persistUniqueKeys (Category _label_aoZx _parent_aoZy)
        = [UniqueCategory _label_aoZx]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aoZA) key_aoZB -> (Entity key_aoZB) value_aoZA)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aoZC value_aoZD) x_aoZE
               -> (Entity key_aoZC)
                    (case value_aoZD of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aoZE, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aoZC value_aoZD) x_aoZE
               -> (Entity key_aoZC)
                    (case value_aoZD of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aoZE}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text,
                 testKeyParent :: !(Maybe T.Text)}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueTestKey T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ Maybe T.Text) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                      (ConstraintNameDB (T.pack "unique_test_key")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_aoZF x_aoZG)
        = [SomePersistField x_aoZF, SomePersistField x_aoZG]
      fromPersistValues [x1_aoZI, x2_aoZJ]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_aoZI
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aoZJ
      fromPersistValues x_aoZH
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_aoZH))
      persistUniqueToFieldNames UniqueTestKey {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueTestKey x_aoZK)
        = [toPersistValue x_aoZK]
      persistUniqueKeys (TestKey _test_aoZL _parent_aoZM)
        = [UniqueTestKey _test_aoZL]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aoZO) key_aoZP -> (Entity key_aoZP) value_aoZO)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_aoZQ value_aoZR) x_aoZS
               -> (Entity key_aoZQ)
                    (case value_aoZR of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_aoZS, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_aoZQ value_aoZR) x_aoZS
               -> (Entity key_aoZQ)
                    (case value_aoZR of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_aoZS}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey (Maybe T.Text) where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(113,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  -- parent T.Text Maybe\n\
      \  parent TestKeyId\n\
      \  UniqueTestKey test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                     (ConstraintNameDB (T.pack "unique_test_key")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "TestKeyId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(113,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                        (ConstraintNameDB (T.pack "unique_test_key")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "TestKeyId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_atEg x_atEh)
        = [SomePersistField x_atEg, SomePersistField x_atEh]
      fromPersistValues [x1_atEj, x2_atEk]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_atEj
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_atEk
      fromPersistValues x_atEi
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_atEi))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_atEl) = [toPersistValue x_atEl]
      persistUniqueKeys (News _title_atEm _categoryId_atEn)
        = [UniqueNews _title_atEm]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atEp) key_atEq -> (Entity key_atEq) value_atEp)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_atEr value_atEs) x_atEt
               -> (Entity key_atEr)
                    (case value_atEs of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_atEt, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_atEr value_atEs) x_atEt
               -> (Entity key_atEr)
                    (case value_atEs of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_atEt}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_atEu x_atEv)
        = [SomePersistField x_atEu, SomePersistField x_atEv]
      fromPersistValues [x1_atEx, x2_atEy]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_atEx
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_atEy
      fromPersistValues x_atEw
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_atEw))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_atEz x_atEA)
        = [toPersistValue x_atEz, toPersistValue x_atEA]
      persistUniqueKeys (Image _header_atEB _base64_atEC)
        = [(UniqueImage _header_atEB) _base64_atEC]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atEE) key_atEF -> (Entity key_atEF) value_atEE)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_atEG value_atEH) x_atEI
               -> (Entity key_atEG)
                    (case value_atEH of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_atEI, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_atEG value_atEH) x_atEI
               -> (Entity key_atEG)
                    (case value_atEH of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_atEI}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_atEJ x_atEK)
        = [SomePersistField x_atEJ, SomePersistField x_atEK]
      fromPersistValues [x1_atEM, x2_atEN]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_atEM
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_atEN
      fromPersistValues x_atEL
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_atEL))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_atEO x_atEP)
        = [toPersistValue x_atEO, toPersistValue x_atEP]
      persistUniqueKeys (ImageBank _newsId_atEQ _imageId_atER)
        = [(UniqueImageBank _newsId_atEQ) _imageId_atER]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atET) key_atEU -> (Entity key_atEU) value_atET)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_atEV value_atEW) x_atEX
               -> (Entity key_atEV)
                    (case value_atEW of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_atEX, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_atEV value_atEW) x_atEX
               -> (Entity key_atEV)
                    (case value_atEW of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_atEX}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_atEY x_atEZ)
        = [SomePersistField x_atEY, SomePersistField x_atEZ]
      fromPersistValues [x1_atF1, x2_atF2]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_atF1
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_atF2
      fromPersistValues x_atF0
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_atF0))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_atF3)
        = [toPersistValue x_atF3]
      persistUniqueKeys (Category _label_atF4 _parent_atF5)
        = [UniqueCategory _label_atF4]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atF7) key_atF8 -> (Entity key_atF8) value_atF7)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_atF9 value_atFa) x_atFb
               -> (Entity key_atF9)
                    (case value_atFa of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_atFb, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_atF9 value_atFa) x_atFb
               -> (Entity key_atF9)
                    (case value_atFa of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_atFb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text, testKeyParent :: !TestKeyId}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueTestKey T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ TestKeyId) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                      (ConstraintNameDB (T.pack "unique_test_key")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "TestKeyId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy TestKeyId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "TestKey")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_atFc x_atFd)
        = [SomePersistField x_atFc, SomePersistField x_atFd]
      fromPersistValues [x1_atFf, x2_atFg]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_atFf
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_atFg
      fromPersistValues x_atFe
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_atFe))
      persistUniqueToFieldNames UniqueTestKey {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueTestKey x_atFh)
        = [toPersistValue x_atFh]
      persistUniqueKeys (TestKey _test_atFi _parent_atFj)
        = [UniqueTestKey _test_atFi]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atFl) key_atFm -> (Entity key_atFm) value_atFl)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_atFn value_atFo) x_atFp
               -> (Entity key_atFn)
                    (case value_atFo of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_atFp, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_atFn value_atFo) x_atFp
               -> (Entity key_atFn)
                    (case value_atFo of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_atFp}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey TestKeyId where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(113,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  -- parent T.Text Maybe\n\
      \  parent TestKeyId Maybe\n\
      \  UniqueTestKey test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                     (ConstraintNameDB (T.pack "unique_test_key")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "TestKeyId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(113,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                        (ConstraintNameDB (T.pack "unique_test_key")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "TestKeyId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aB9t x_aB9u)
        = [SomePersistField x_aB9t, SomePersistField x_aB9u]
      fromPersistValues [x1_aB9w, x2_aB9x]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aB9w
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aB9x
      fromPersistValues x_aB9v
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aB9v))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aB9y) = [toPersistValue x_aB9y]
      persistUniqueKeys (News _title_aB9z _categoryId_aB9A)
        = [UniqueNews _title_aB9z]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aB9C) key_aB9D -> (Entity key_aB9D) value_aB9C)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aB9E value_aB9F) x_aB9G
               -> (Entity key_aB9E)
                    (case value_aB9F of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aB9G, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aB9E value_aB9F) x_aB9G
               -> (Entity key_aB9E)
                    (case value_aB9F of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aB9G}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aB9H x_aB9I)
        = [SomePersistField x_aB9H, SomePersistField x_aB9I]
      fromPersistValues [x1_aB9K, x2_aB9L]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aB9K
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aB9L
      fromPersistValues x_aB9J
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aB9J))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aB9M x_aB9N)
        = [toPersistValue x_aB9M, toPersistValue x_aB9N]
      persistUniqueKeys (Image _header_aB9O _base64_aB9P)
        = [(UniqueImage _header_aB9O) _base64_aB9P]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aB9R) key_aB9S -> (Entity key_aB9S) value_aB9R)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aB9T value_aB9U) x_aB9V
               -> (Entity key_aB9T)
                    (case value_aB9U of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aB9V, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aB9T value_aB9U) x_aB9V
               -> (Entity key_aB9T)
                    (case value_aB9U of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aB9V}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aB9W x_aB9X)
        = [SomePersistField x_aB9W, SomePersistField x_aB9X]
      fromPersistValues [x1_aB9Z, x2_aBa0]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aB9Z
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aBa0
      fromPersistValues x_aB9Y
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aB9Y))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aBa1 x_aBa2)
        = [toPersistValue x_aBa1, toPersistValue x_aBa2]
      persistUniqueKeys (ImageBank _newsId_aBa3 _imageId_aBa4)
        = [(UniqueImageBank _newsId_aBa3) _imageId_aBa4]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBa6) key_aBa7 -> (Entity key_aBa7) value_aBa6)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aBa8 value_aBa9) x_aBaa
               -> (Entity key_aBa8)
                    (case value_aBa9 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aBaa, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aBa8 value_aBa9) x_aBaa
               -> (Entity key_aBa8)
                    (case value_aBa9 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aBaa}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aBab x_aBac)
        = [SomePersistField x_aBab, SomePersistField x_aBac]
      fromPersistValues [x1_aBae, x2_aBaf]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aBae
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aBaf
      fromPersistValues x_aBad
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aBad))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aBag)
        = [toPersistValue x_aBag]
      persistUniqueKeys (Category _label_aBah _parent_aBai)
        = [UniqueCategory _label_aBah]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBak) key_aBal -> (Entity key_aBal) value_aBak)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aBam value_aBan) x_aBao
               -> (Entity key_aBam)
                    (case value_aBan of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aBao, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aBam value_aBan) x_aBao
               -> (Entity key_aBam)
                    (case value_aBan of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aBao}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text,
                 testKeyParent :: !(Maybe TestKeyId)}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueTestKey T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ Maybe TestKeyId) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                      (ConstraintNameDB (T.pack "unique_test_key")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "TestKeyId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy TestKeyId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "TestKey")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_aBap x_aBaq)
        = [SomePersistField x_aBap, SomePersistField x_aBaq]
      fromPersistValues [x1_aBas, x2_aBat]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_aBas
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aBat
      fromPersistValues x_aBar
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_aBar))
      persistUniqueToFieldNames UniqueTestKey {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueTestKey x_aBau)
        = [toPersistValue x_aBau]
      persistUniqueKeys (TestKey _test_aBav _parent_aBaw)
        = [UniqueTestKey _test_aBav]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBay) key_aBaz -> (Entity key_aBaz) value_aBay)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_aBaA value_aBaB) x_aBaC
               -> (Entity key_aBaA)
                    (case value_aBaB of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_aBaC, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_aBaA value_aBaB) x_aBaC
               -> (Entity key_aBaA)
                    (case value_aBaB of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_aBaC}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey (Maybe TestKeyId) where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(113,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \ TestKey sql=testkey\n\
      \  test T.Text\n\
      \  -- parent T.Text Maybe\n\
      \  parent TestKeyId Maybe\n\
      \  UniqueTestKey test\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "TestKey")))
                    (EntityNameDB (T.pack "testkey")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=testkey"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                     (ConstraintNameDB (T.pack "unique_test_key")))
                    ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "test")))
                (FieldNameDB (T.pack "test")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "TestKeyId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(113,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "TestKey")))
                       (EntityNameDB (T.pack "testkey")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=testkey"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                        (ConstraintNameDB (T.pack "unique_test_key")))
                       ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "test")))
                   (FieldNameDB (T.pack "test")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "TestKeyId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField TestKey where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["test", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql TestKey where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aG2n x_aG2o)
        = [SomePersistField x_aG2n, SomePersistField x_aG2o]
      fromPersistValues [x1_aG2q, x2_aG2r]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aG2q
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aG2r
      fromPersistValues x_aG2p
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aG2p))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aG2s) = [toPersistValue x_aG2s]
      persistUniqueKeys (News _title_aG2t _categoryId_aG2u)
        = [UniqueNews _title_aG2t]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aG2w) key_aG2x -> (Entity key_aG2x) value_aG2w)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aG2y value_aG2z) x_aG2A
               -> (Entity key_aG2y)
                    (case value_aG2z of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aG2A, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aG2y value_aG2z) x_aG2A
               -> (Entity key_aG2y)
                    (case value_aG2z of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aG2A}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aG2B x_aG2C)
        = [SomePersistField x_aG2B, SomePersistField x_aG2C]
      fromPersistValues [x1_aG2E, x2_aG2F]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aG2E
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aG2F
      fromPersistValues x_aG2D
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aG2D))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aG2G x_aG2H)
        = [toPersistValue x_aG2G, toPersistValue x_aG2H]
      persistUniqueKeys (Image _header_aG2I _base64_aG2J)
        = [(UniqueImage _header_aG2I) _base64_aG2J]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aG2L) key_aG2M -> (Entity key_aG2M) value_aG2L)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aG2N value_aG2O) x_aG2P
               -> (Entity key_aG2N)
                    (case value_aG2O of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aG2P, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aG2N value_aG2O) x_aG2P
               -> (Entity key_aG2N)
                    (case value_aG2O of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aG2P}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aG2Q x_aG2R)
        = [SomePersistField x_aG2Q, SomePersistField x_aG2R]
      fromPersistValues [x1_aG2T, x2_aG2U]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aG2T
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aG2U
      fromPersistValues x_aG2S
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aG2S))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aG2V x_aG2W)
        = [toPersistValue x_aG2V, toPersistValue x_aG2W]
      persistUniqueKeys (ImageBank _newsId_aG2X _imageId_aG2Y)
        = [(UniqueImageBank _newsId_aG2X) _imageId_aG2Y]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aG30) key_aG31 -> (Entity key_aG31) value_aG30)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aG32 value_aG33) x_aG34
               -> (Entity key_aG32)
                    (case value_aG33 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aG34, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aG32 value_aG33) x_aG34
               -> (Entity key_aG32)
                    (case value_aG33 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aG34}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe T.Text)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe T.Text) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aG35 x_aG36)
        = [SomePersistField x_aG35, SomePersistField x_aG36]
      fromPersistValues [x1_aG38, x2_aG39]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aG38
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aG39
      fromPersistValues x_aG37
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aG37))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aG3a)
        = [toPersistValue x_aG3a]
      persistUniqueKeys (Category _label_aG3b _parent_aG3c)
        = [UniqueCategory _label_aG3b]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aG3e) key_aG3f -> (Entity key_aG3f) value_aG3e)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aG3g value_aG3h) x_aG3i
               -> (Entity key_aG3g)
                    (case value_aG3h of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aG3i, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aG3g value_aG3h) x_aG3i
               -> (Entity key_aG3g)
                    (case value_aG3h of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aG3i}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    data TestKey
      = TestKey {testKeyTest :: !T.Text,
                 testKeyParent :: !(Maybe TestKeyId)}
      deriving stock (Eq, Show)
    type TestKeyId = Database.Persist.Key TestKey
    instance PersistEntity TestKey where
      type PersistEntityBackend TestKey = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique TestKey = UniqueTestKey T.Text
      newtype Database.Persist.Key TestKey
        = TestKeyKey {unTestKeyKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField TestKey typ
        = (typ ~ TestKeyId) => TestKeyId |
          (typ ~ T.Text) => TestKeyTest |
          (typ ~ Maybe TestKeyId) => TestKeyParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ TestKeyKey {unTestKeyKey = x} -> x)))
      keyFromValues
        = (fmap TestKeyKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "TestKey")))
                     (EntityNameDB (T.pack "testkey")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=testkey"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueTestKey")))
                      (ConstraintNameDB (T.pack "unique_test_key")))
                     ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "test"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "test"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "TestKeyId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy TestKeyId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "TestKey")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "TestKeyId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (TestKey x_aG3j x_aG3k)
        = [SomePersistField x_aG3j, SomePersistField x_aG3k]
      fromPersistValues [x1_aG3m, x2_aG3n]
        = TestKey
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "test"))
                 . fromPersistValue)
                x1_aG3m
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "testkey")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aG3n
      fromPersistValues x_aG3l
        = (Left
             $ (mappend (T.pack "TestKey: fromPersistValues failed on: "))
                 (T.pack $ show x_aG3l))
      persistUniqueToFieldNames UniqueTestKey {}
        = ((FieldNameHS (T.pack "test"), FieldNameDB (T.pack "test"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueTestKey x_aG3o)
        = [toPersistValue x_aG3o]
      persistUniqueKeys (TestKey _test_aG3p _parent_aG3q)
        = [UniqueTestKey _test_aG3p]
      persistFieldDef TestKeyId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "TestKeyId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef TestKeyTest
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "test"))
      persistFieldDef TestKeyParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey))
            (FieldNameHS (T.pack "parent"))
      persistIdField = TestKeyId
      fieldLens TestKeyId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aG3s) key_aG3t -> (Entity key_aG3t) value_aG3s)
      fieldLens TestKeyTest
        = (PTH.lensPTH ((\ TestKey {testKeyTest = x} -> x) . entityVal))
            (\ (Entity key_aG3u value_aG3v) x_aG3w
               -> (Entity key_aG3u)
                    (case value_aG3v of
                       TestKey {testKeyParent = testKeyParent}
                         -> TestKey {testKeyTest = x_aG3w, testKeyParent = testKeyParent}))
      fieldLens TestKeyParent
        = (PTH.lensPTH ((\ TestKey {testKeyParent = x} -> x) . entityVal))
            (\ (Entity key_aG3u value_aG3v) x_aG3w
               -> (Entity key_aG3u)
                    (case value_aG3v of
                       TestKey {testKeyTest = testKeyTest}
                         -> TestKey {testKeyTest = testKeyTest, testKeyParent = x_aG3w}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend TestKey where
      toBackendKey = \ TestKeyKey {unTestKeyKey = x} -> x
      fromBackendKey = TestKeyKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey TestKey where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey TestKey where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe T.Text) where
      symbolToField = CategoryParent
    instance SymbolToField "id" TestKey (Database.Persist.Key TestKey) where
      symbolToField = TestKeyId
    instance SymbolToField "test" TestKey T.Text where
      symbolToField = TestKeyTest
    instance SymbolToField "parent" TestKey (Maybe TestKeyId) where
      symbolToField = TestKeyParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy TestKey)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(114,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  -- parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \--  TestKey sql=testkey\n\
      \--   test T.Text\n\
      \--   -- parent T.Text Maybe\n\
      \--   parent TestKeyId Maybe\n\
      \--   UniqueTestKey test\n\
      \--   deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(114,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aKCP x_aKCQ)
        = [SomePersistField x_aKCP, SomePersistField x_aKCQ]
      fromPersistValues [x1_aKCS, x2_aKCT]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aKCS
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aKCT
      fromPersistValues x_aKCR
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aKCR))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aKCU) = [toPersistValue x_aKCU]
      persistUniqueKeys (News _title_aKCV _categoryId_aKCW)
        = [UniqueNews _title_aKCV]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aKCY) key_aKCZ -> (Entity key_aKCZ) value_aKCY)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aKD0 value_aKD1) x_aKD2
               -> (Entity key_aKD0)
                    (case value_aKD1 of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aKD2, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aKD0 value_aKD1) x_aKD2
               -> (Entity key_aKD0)
                    (case value_aKD1 of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aKD2}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aKD3 x_aKD4)
        = [SomePersistField x_aKD3, SomePersistField x_aKD4]
      fromPersistValues [x1_aKD6, x2_aKD7]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aKD6
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aKD7
      fromPersistValues x_aKD5
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aKD5))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aKD8 x_aKD9)
        = [toPersistValue x_aKD8, toPersistValue x_aKD9]
      persistUniqueKeys (Image _header_aKDa _base64_aKDb)
        = [(UniqueImage _header_aKDa) _base64_aKDb]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aKDd) key_aKDe -> (Entity key_aKDe) value_aKDd)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aKDf value_aKDg) x_aKDh
               -> (Entity key_aKDf)
                    (case value_aKDg of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aKDh, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aKDf value_aKDg) x_aKDh
               -> (Entity key_aKDf)
                    (case value_aKDg of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aKDh}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aKDi x_aKDj)
        = [SomePersistField x_aKDi, SomePersistField x_aKDj]
      fromPersistValues [x1_aKDl, x2_aKDm]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aKDl
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aKDm
      fromPersistValues x_aKDk
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aKDk))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aKDn x_aKDo)
        = [toPersistValue x_aKDn, toPersistValue x_aKDo]
      persistUniqueKeys (ImageBank _newsId_aKDp _imageId_aKDq)
        = [(UniqueImageBank _newsId_aKDp) _imageId_aKDq]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aKDs) key_aKDt -> (Entity key_aKDt) value_aKDs)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aKDu value_aKDv) x_aKDw
               -> (Entity key_aKDu)
                    (case value_aKDv of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aKDw, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aKDu value_aKDv) x_aKDw
               -> (Entity key_aKDu)
                    (case value_aKDv of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aKDw}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aKDx x_aKDy)
        = [SomePersistField x_aKDx, SomePersistField x_aKDy]
      fromPersistValues [x1_aKDA, x2_aKDB]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aKDA
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aKDB
      fromPersistValues x_aKDz
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aKDz))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aKDC)
        = [toPersistValue x_aKDC]
      persistUniqueKeys (Category _label_aKDD _parent_aKDE)
        = [UniqueCategory _label_aKDD]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aKDG) key_aKDH -> (Entity key_aKDH) value_aKDG)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aKDI value_aKDJ) x_aKDK
               -> (Entity key_aKDI)
                    (case value_aKDJ of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aKDK, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aKDI value_aKDJ) x_aKDK
               -> (Entity key_aKDI)
                    (case value_aKDJ of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aKDK}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(114,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  -- parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \--  TestKey sql=testkey\n\
      \--   test T.Text\n\
      \--   -- parent T.Text Maybe\n\
      \--   parent TestKeyId Maybe\n\
      \--   UniqueTestKey test\n\
      \--   deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(114,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aOwg x_aOwh)
        = [SomePersistField x_aOwg, SomePersistField x_aOwh]
      fromPersistValues [x1_aOwj, x2_aOwk]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aOwj
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aOwk
      fromPersistValues x_aOwi
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aOwi))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aOwl) = [toPersistValue x_aOwl]
      persistUniqueKeys (News _title_aOwm _categoryId_aOwn)
        = [UniqueNews _title_aOwm]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aOwp) key_aOwq -> (Entity key_aOwq) value_aOwp)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aOwr value_aOws) x_aOwt
               -> (Entity key_aOwr)
                    (case value_aOws of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aOwt, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aOwr value_aOws) x_aOwt
               -> (Entity key_aOwr)
                    (case value_aOws of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aOwt}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aOwu x_aOwv)
        = [SomePersistField x_aOwu, SomePersistField x_aOwv]
      fromPersistValues [x1_aOwx, x2_aOwy]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aOwx
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aOwy
      fromPersistValues x_aOww
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aOww))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aOwz x_aOwA)
        = [toPersistValue x_aOwz, toPersistValue x_aOwA]
      persistUniqueKeys (Image _header_aOwB _base64_aOwC)
        = [(UniqueImage _header_aOwB) _base64_aOwC]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aOwE) key_aOwF -> (Entity key_aOwF) value_aOwE)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aOwG value_aOwH) x_aOwI
               -> (Entity key_aOwG)
                    (case value_aOwH of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aOwI, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aOwG value_aOwH) x_aOwI
               -> (Entity key_aOwG)
                    (case value_aOwH of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aOwI}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aOwJ x_aOwK)
        = [SomePersistField x_aOwJ, SomePersistField x_aOwK]
      fromPersistValues [x1_aOwM, x2_aOwN]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aOwM
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aOwN
      fromPersistValues x_aOwL
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aOwL))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aOwO x_aOwP)
        = [toPersistValue x_aOwO, toPersistValue x_aOwP]
      persistUniqueKeys (ImageBank _newsId_aOwQ _imageId_aOwR)
        = [(UniqueImageBank _newsId_aOwQ) _imageId_aOwR]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aOwT) key_aOwU -> (Entity key_aOwU) value_aOwT)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aOwV value_aOwW) x_aOwX
               -> (Entity key_aOwV)
                    (case value_aOwW of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aOwX, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aOwV value_aOwW) x_aOwX
               -> (Entity key_aOwV)
                    (case value_aOwW of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aOwX}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aOwY x_aOwZ)
        = [SomePersistField x_aOwY, SomePersistField x_aOwZ]
      fromPersistValues [x1_aOx1, x2_aOx2]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aOx1
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aOx2
      fromPersistValues x_aOx0
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aOx0))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aOx3)
        = [toPersistValue x_aOx3]
      persistUniqueKeys (Category _label_aOx4 _parent_aOx5)
        = [UniqueCategory _label_aOx4]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aOx7) key_aOx8 -> (Entity key_aOx8) value_aOx7)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aOx9 value_aOxa) x_aOxb
               -> (Entity key_aOx9)
                    (case value_aOxa of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aOxb, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aOx9 value_aOxa) x_aOxb
               -> (Entity key_aOx9)
                    (case value_aOxa of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aOxb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(114,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  -- parent T.Text Maybe  -- to do parent CategoryId Maybe .. try to antoher table\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \--  TestKey sql=testkey\n\
      \--   test T.Text\n\
      \--   -- parent T.Text Maybe\n\
      \--   parent TestKeyId Maybe\n\
      \--   UniqueTestKey test\n\
      \--   deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(114,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aSfN x_aSfO)
        = [SomePersistField x_aSfN, SomePersistField x_aSfO]
      fromPersistValues [x1_aSfQ, x2_aSfR]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aSfQ
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aSfR
      fromPersistValues x_aSfP
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aSfP))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aSfS) = [toPersistValue x_aSfS]
      persistUniqueKeys (News _title_aSfT _categoryId_aSfU)
        = [UniqueNews _title_aSfT]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aSfW) key_aSfX -> (Entity key_aSfX) value_aSfW)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aSfY value_aSfZ) x_aSg0
               -> (Entity key_aSfY)
                    (case value_aSfZ of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aSg0, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aSfY value_aSfZ) x_aSg0
               -> (Entity key_aSfY)
                    (case value_aSfZ of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aSg0}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aSg1 x_aSg2)
        = [SomePersistField x_aSg1, SomePersistField x_aSg2]
      fromPersistValues [x1_aSg4, x2_aSg5]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aSg4
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aSg5
      fromPersistValues x_aSg3
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aSg3))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aSg6 x_aSg7)
        = [toPersistValue x_aSg6, toPersistValue x_aSg7]
      persistUniqueKeys (Image _header_aSg8 _base64_aSg9)
        = [(UniqueImage _header_aSg8) _base64_aSg9]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aSgb) key_aSgc -> (Entity key_aSgc) value_aSgb)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aSgd value_aSge) x_aSgf
               -> (Entity key_aSgd)
                    (case value_aSge of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aSgf, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aSgd value_aSge) x_aSgf
               -> (Entity key_aSgd)
                    (case value_aSge of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aSgf}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aSgg x_aSgh)
        = [SomePersistField x_aSgg, SomePersistField x_aSgh]
      fromPersistValues [x1_aSgj, x2_aSgk]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aSgj
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aSgk
      fromPersistValues x_aSgi
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aSgi))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aSgl x_aSgm)
        = [toPersistValue x_aSgl, toPersistValue x_aSgm]
      persistUniqueKeys (ImageBank _newsId_aSgn _imageId_aSgo)
        = [(UniqueImageBank _newsId_aSgn) _imageId_aSgo]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aSgq) key_aSgr -> (Entity key_aSgr) value_aSgq)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aSgs value_aSgt) x_aSgu
               -> (Entity key_aSgs)
                    (case value_aSgt of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aSgu, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aSgs value_aSgt) x_aSgu
               -> (Entity key_aSgs)
                    (case value_aSgt of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aSgu}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aSgv x_aSgw)
        = [SomePersistField x_aSgv, SomePersistField x_aSgw]
      fromPersistValues [x1_aSgy, x2_aSgz]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aSgy
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aSgz
      fromPersistValues x_aSgx
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aSgx))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aSgA)
        = [toPersistValue x_aSgA]
      persistUniqueKeys (Category _label_aSgB _parent_aSgC)
        = [UniqueCategory _label_aSgB]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aSgE) key_aSgF -> (Entity key_aSgF) value_aSgE)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aSgG value_aSgH) x_aSgI
               -> (Entity key_aSgG)
                    (case value_aSgH of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aSgI, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aSgG value_aSgH) x_aSgI
               -> (Entity key_aSgG)
                    (case value_aSgH of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aSgI}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Eq Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Eq Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Eq Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock (Eq, Show)
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aWeo x_aWep)
        = [SomePersistField x_aWeo, SomePersistField x_aWep]
      fromPersistValues [x1_aWer, x2_aWes]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aWer
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_aWes
      fromPersistValues x_aWeq
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aWeq))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aWet) = [toPersistValue x_aWet]
      persistUniqueKeys (News _title_aWeu _categoryId_aWev)
        = [UniqueNews _title_aWeu]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aWex) key_aWey -> (Entity key_aWey) value_aWex)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aWez value_aWeA) x_aWeB
               -> (Entity key_aWez)
                    (case value_aWeA of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_aWeB, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_aWez value_aWeA) x_aWeB
               -> (Entity key_aWez)
                    (case value_aWeA of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_aWeB}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock (Eq, Show)
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aWeC x_aWeD)
        = [SomePersistField x_aWeC, SomePersistField x_aWeD]
      fromPersistValues [x1_aWeF, x2_aWeG]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aWeF
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aWeG
      fromPersistValues x_aWeE
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aWeE))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aWeH x_aWeI)
        = [toPersistValue x_aWeH, toPersistValue x_aWeI]
      persistUniqueKeys (Image _header_aWeJ _base64_aWeK)
        = [(UniqueImage _header_aWeJ) _base64_aWeK]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aWeM) key_aWeN -> (Entity key_aWeN) value_aWeM)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aWeO value_aWeP) x_aWeQ
               -> (Entity key_aWeO)
                    (case value_aWeP of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aWeQ, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aWeO value_aWeP) x_aWeQ
               -> (Entity key_aWeO)
                    (case value_aWeP of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aWeQ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock (Eq, Show)
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aWeR x_aWeS)
        = [SomePersistField x_aWeR, SomePersistField x_aWeS]
      fromPersistValues [x1_aWeU, x2_aWeV]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aWeU
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aWeV
      fromPersistValues x_aWeT
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aWeT))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aWeW x_aWeX)
        = [toPersistValue x_aWeW, toPersistValue x_aWeX]
      persistUniqueKeys (ImageBank _newsId_aWeY _imageId_aWeZ)
        = [(UniqueImageBank _newsId_aWeY) _imageId_aWeZ]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aWf1) key_aWf2 -> (Entity key_aWf2) value_aWf1)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aWf3 value_aWf4) x_aWf5
               -> (Entity key_aWf3)
                    (case value_aWf4 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aWf5, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aWf3 value_aWf4) x_aWf5
               -> (Entity key_aWf3)
                    (case value_aWf4 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aWf5}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_aWf6 x_aWf7)
        = [SomePersistField x_aWf6, SomePersistField x_aWf7]
      fromPersistValues [x1_aWf9, x2_aWfa]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_aWf9
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_aWfa
      fromPersistValues x_aWf8
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_aWf8))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_aWfb)
        = [toPersistValue x_aWfb]
      persistUniqueKeys (Category _label_aWfc _parent_aWfd)
        = [UniqueCategory _label_aWfc]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aWff) key_aWfg -> (Entity key_aWfg) value_aWff)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_aWfh value_aWfi) x_aWfj
               -> (Entity key_aWfh)
                    (case value_aWfi of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_aWfj, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_aWfh value_aWfi) x_aWfj
               -> (Entity key_aWfh)
                    (case value_aWfi of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_aWfj}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Eq Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Eq Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Eq Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock (Eq, Show)
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a101f x_a101g)
        = [SomePersistField x_a101f, SomePersistField x_a101g]
      fromPersistValues [x1_a101i, x2_a101j]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a101i
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_a101j
      fromPersistValues x_a101h
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a101h))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a101k)
        = [toPersistValue x_a101k]
      persistUniqueKeys (News _title_a101l _categoryId_a101m)
        = [UniqueNews _title_a101l]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a101o) key_a101p
               -> (Entity key_a101p) value_a101o)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a101q value_a101r) x_a101s
               -> (Entity key_a101q)
                    (case value_a101r of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_a101s, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_a101q value_a101r) x_a101s
               -> (Entity key_a101q)
                    (case value_a101r of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_a101s}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock (Eq, Show)
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a101t x_a101u)
        = [SomePersistField x_a101t, SomePersistField x_a101u]
      fromPersistValues [x1_a101w, x2_a101x]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a101w
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a101x
      fromPersistValues x_a101v
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a101v))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a101y x_a101z)
        = [toPersistValue x_a101y, toPersistValue x_a101z]
      persistUniqueKeys (Image _header_a101A _base64_a101B)
        = [(UniqueImage _header_a101A) _base64_a101B]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a101D) key_a101E
               -> (Entity key_a101E) value_a101D)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a101F value_a101G) x_a101H
               -> (Entity key_a101F)
                    (case value_a101G of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a101H, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a101F value_a101G) x_a101H
               -> (Entity key_a101F)
                    (case value_a101G of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a101H}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock (Eq, Show)
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a101I x_a101J)
        = [SomePersistField x_a101I, SomePersistField x_a101J]
      fromPersistValues [x1_a101L, x2_a101M]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a101L
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a101M
      fromPersistValues x_a101K
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a101K))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a101N x_a101O)
        = [toPersistValue x_a101N, toPersistValue x_a101O]
      persistUniqueKeys (ImageBank _newsId_a101P _imageId_a101Q)
        = [(UniqueImageBank _newsId_a101P) _imageId_a101Q]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a101S) key_a101T
               -> (Entity key_a101T) value_a101S)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a101U value_a101V) x_a101W
               -> (Entity key_a101U)
                    (case value_a101V of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a101W, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a101U value_a101V) x_a101W
               -> (Entity key_a101U)
                    (case value_a101V of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a101W}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_a101X x_a101Y)
        = [SomePersistField x_a101X, SomePersistField x_a101Y]
      fromPersistValues [x1_a1020, x2_a1021]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_a1020
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_a1021
      fromPersistValues x_a101Z
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_a101Z))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_a1022)
        = [toPersistValue x_a1022]
      persistUniqueKeys (Category _label_a1023 _parent_a1024)
        = [UniqueCategory _label_a1023]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a1026) key_a1027
               -> (Entity key_a1027) value_a1026)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_a1028 value_a1029) x_a102a
               -> (Entity key_a1028)
                    (case value_a1029 of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_a102a, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_a1028 value_a1029) x_a102a
               -> (Entity key_a1028)
                    (case value_a1029 of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_a102a}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock Show
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a14y7 x_a14y8)
        = [SomePersistField x_a14y7, SomePersistField x_a14y8]
      fromPersistValues [x1_a14ya, x2_a14yb]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a14ya
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_a14yb
      fromPersistValues x_a14y9
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a14y9))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a14yc)
        = [toPersistValue x_a14yc]
      persistUniqueKeys (News _title_a14yd _categoryId_a14ye)
        = [UniqueNews _title_a14yd]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a14yg) key_a14yh
               -> (Entity key_a14yh) value_a14yg)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a14yi value_a14yj) x_a14yk
               -> (Entity key_a14yi)
                    (case value_a14yj of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_a14yk, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_a14yi value_a14yj) x_a14yk
               -> (Entity key_a14yi)
                    (case value_a14yj of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_a14yk}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock Show
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a14yl x_a14ym)
        = [SomePersistField x_a14yl, SomePersistField x_a14ym]
      fromPersistValues [x1_a14yo, x2_a14yp]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a14yo
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a14yp
      fromPersistValues x_a14yn
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a14yn))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a14yq x_a14yr)
        = [toPersistValue x_a14yq, toPersistValue x_a14yr]
      persistUniqueKeys (Image _header_a14ys _base64_a14yt)
        = [(UniqueImage _header_a14ys) _base64_a14yt]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a14yv) key_a14yw
               -> (Entity key_a14yw) value_a14yv)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a14yx value_a14yy) x_a14yz
               -> (Entity key_a14yx)
                    (case value_a14yy of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a14yz, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a14yx value_a14yy) x_a14yz
               -> (Entity key_a14yx)
                    (case value_a14yy of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a14yz}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock Show
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a14yA x_a14yB)
        = [SomePersistField x_a14yA, SomePersistField x_a14yB]
      fromPersistValues [x1_a14yD, x2_a14yE]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a14yD
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a14yE
      fromPersistValues x_a14yC
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a14yC))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a14yF x_a14yG)
        = [toPersistValue x_a14yF, toPersistValue x_a14yG]
      persistUniqueKeys (ImageBank _newsId_a14yH _imageId_a14yI)
        = [(UniqueImageBank _newsId_a14yH) _imageId_a14yI]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a14yK) key_a14yL
               -> (Entity key_a14yL) value_a14yK)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a14yM value_a14yN) x_a14yO
               -> (Entity key_a14yM)
                    (case value_a14yN of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a14yO, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a14yM value_a14yN) x_a14yO
               -> (Entity key_a14yM)
                    (case value_a14yN of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a14yO}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock Show
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_a14yP x_a14yQ)
        = [SomePersistField x_a14yP, SomePersistField x_a14yQ]
      fromPersistValues [x1_a14yS, x2_a14yT]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_a14yS
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_a14yT
      fromPersistValues x_a14yR
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_a14yR))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_a14yU)
        = [toPersistValue x_a14yU]
      persistUniqueKeys (Category _label_a14yV _parent_a14yW)
        = [UniqueCategory _label_a14yV]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a14yY) key_a14yZ
               -> (Entity key_a14yZ) value_a14yY)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_a14z0 value_a14z1) x_a14z2
               -> (Entity key_a14z0)
                    (case value_a14z1 of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_a14z2, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_a14z0 value_a14z1) x_a14z2
               -> (Entity key_a14z0)
                    (case value_a14z1 of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_a14z2}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Eq Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Eq Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Eq Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock (Eq, Show)
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a18wI x_a18wJ)
        = [SomePersistField x_a18wI, SomePersistField x_a18wJ]
      fromPersistValues [x1_a18wL, x2_a18wM]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a18wL
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_a18wM
      fromPersistValues x_a18wK
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a18wK))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a18wN)
        = [toPersistValue x_a18wN]
      persistUniqueKeys (News _title_a18wO _categoryId_a18wP)
        = [UniqueNews _title_a18wO]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a18wR) key_a18wS
               -> (Entity key_a18wS) value_a18wR)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a18wT value_a18wU) x_a18wV
               -> (Entity key_a18wT)
                    (case value_a18wU of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_a18wV, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_a18wT value_a18wU) x_a18wV
               -> (Entity key_a18wT)
                    (case value_a18wU of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_a18wV}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock (Eq, Show)
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a18wW x_a18wX)
        = [SomePersistField x_a18wW, SomePersistField x_a18wX]
      fromPersistValues [x1_a18wZ, x2_a18x0]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a18wZ
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a18x0
      fromPersistValues x_a18wY
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a18wY))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a18x1 x_a18x2)
        = [toPersistValue x_a18x1, toPersistValue x_a18x2]
      persistUniqueKeys (Image _header_a18x3 _base64_a18x4)
        = [(UniqueImage _header_a18x3) _base64_a18x4]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a18x6) key_a18x7
               -> (Entity key_a18x7) value_a18x6)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a18x8 value_a18x9) x_a18xa
               -> (Entity key_a18x8)
                    (case value_a18x9 of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a18xa, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a18x8 value_a18x9) x_a18xa
               -> (Entity key_a18x8)
                    (case value_a18x9 of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a18xa}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock (Eq, Show)
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a18xb x_a18xc)
        = [SomePersistField x_a18xb, SomePersistField x_a18xc]
      fromPersistValues [x1_a18xe, x2_a18xf]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a18xe
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a18xf
      fromPersistValues x_a18xd
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a18xd))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a18xg x_a18xh)
        = [toPersistValue x_a18xg, toPersistValue x_a18xh]
      persistUniqueKeys (ImageBank _newsId_a18xi _imageId_a18xj)
        = [(UniqueImageBank _newsId_a18xi) _imageId_a18xj]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a18xl) key_a18xm
               -> (Entity key_a18xm) value_a18xl)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a18xn value_a18xo) x_a18xp
               -> (Entity key_a18xn)
                    (case value_a18xo of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a18xp, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a18xn value_a18xo) x_a18xp
               -> (Entity key_a18xn)
                    (case value_a18xo of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a18xp}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_a18xq x_a18xr)
        = [SomePersistField x_a18xq, SomePersistField x_a18xr]
      fromPersistValues [x1_a18xt, x2_a18xu]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_a18xt
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_a18xu
      fromPersistValues x_a18xs
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_a18xs))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_a18xv)
        = [toPersistValue x_a18xv]
      persistUniqueKeys (Category _label_a18xw _parent_a18xx)
        = [UniqueCategory _label_a18xw]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a18xz) key_a18xA
               -> (Entity key_a18xA) value_a18xz)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_a18xB value_a18xC) x_a18xD
               -> (Entity key_a18xB)
                    (case value_a18xC of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_a18xD, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_a18xB value_a18xC) x_a18xD
               -> (Entity key_a18xB)
                    (case value_a18xC of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_a18xD}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(107,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  categoryId CategoryId\n\
      \  UniqueNews title\n\
      \  deriving Eq Show\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \  deriving Eq Show\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \  deriving Eq Show\n\
      \ Category sql=categories\n\
      \  label T.Text\n\
      \  parent CategoryId Maybe\n\
      \  UniqueCategory label\n\
      \  deriving Eq Show\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "categoryId")))
                (FieldNameDB (T.pack "category_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Category")))
                    (EntityNameDB (T.pack "categories")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=categories"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                     (ConstraintNameDB (T.pack "unique_category")))
                    ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                       GHC.Base.:| []))
                   []])
               [])
              [T.pack "Eq", T.pack "Show"])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "label")))
                (FieldNameDB (T.pack "label")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "parent")))
                (FieldNameDB (T.pack "parent")))
               [FieldAttrMaybe])
              True)
             ((FTTypeCon Nothing) (T.pack "CategoryId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(107,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "categoryId")))
                   (FieldNameDB (T.pack "category_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Category")))
                       (EntityNameDB (T.pack "categories")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=categories"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                        (ConstraintNameDB (T.pack "unique_category")))
                       ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [T.pack "Eq", T.pack "Show"])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "label")))
                   (FieldNameDB (T.pack "label")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "parent")))
                   (FieldNameDB (T.pack "parent")))
                  [FieldAttrMaybe])
                 True)
                ((FTTypeCon Nothing) (T.pack "CategoryId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["title", "categoryId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Category where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["label", "parent"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Category where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News
      = News {newsTitle :: !T.Text, newsCategoryId :: !CategoryId}
      deriving stock (Eq, Show)
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId |
          (typ ~ T.Text) => NewsTitle |
          (typ ~ CategoryId) => NewsCategoryId
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "categoryId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "category_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a1cjM x_a1cjN)
        = [SomePersistField x_a1cjM, SomePersistField x_a1cjN]
      fromPersistValues [x1_a1cjP, x2_a1cjQ]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a1cjP
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "categoryId"))
                 . fromPersistValue)
                x2_a1cjQ
      fromPersistValues x_a1cjO
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a1cjO))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a1cjR)
        = [toPersistValue x_a1cjR]
      persistUniqueKeys (News _title_a1cjS _categoryId_a1cjT)
        = [UniqueNews _title_a1cjS]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistFieldDef NewsCategoryId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "categoryId"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a1cjV) key_a1cjW
               -> (Entity key_a1cjW) value_a1cjV)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a1cjX value_a1cjY) x_a1cjZ
               -> (Entity key_a1cjX)
                    (case value_a1cjY of
                       News {newsCategoryId = newsCategoryId}
                         -> News {newsTitle = x_a1cjZ, newsCategoryId = newsCategoryId}))
      fieldLens NewsCategoryId
        = (PTH.lensPTH ((\ News {newsCategoryId = x} -> x) . entityVal))
            (\ (Entity key_a1cjX value_a1cjY) x_a1cjZ
               -> (Entity key_a1cjX)
                    (case value_a1cjY of
                       News {newsTitle = newsTitle}
                         -> News {newsTitle = newsTitle, newsCategoryId = x_a1cjZ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image
      = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
      deriving stock (Eq, Show)
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a1ck0 x_a1ck1)
        = [SomePersistField x_a1ck0, SomePersistField x_a1ck1]
      fromPersistValues [x1_a1ck3, x2_a1ck4]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a1ck3
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a1ck4
      fromPersistValues x_a1ck2
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a1ck2))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a1ck5 x_a1ck6)
        = [toPersistValue x_a1ck5, toPersistValue x_a1ck6]
      persistUniqueKeys (Image _header_a1ck7 _base64_a1ck8)
        = [(UniqueImage _header_a1ck7) _base64_a1ck8]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a1cka) key_a1ckb
               -> (Entity key_a1ckb) value_a1cka)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a1ckc value_a1ckd) x_a1cke
               -> (Entity key_a1ckc)
                    (case value_a1ckd of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a1cke, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a1ckc value_a1ckd) x_a1cke
               -> (Entity key_a1ckc)
                    (case value_a1ckd of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a1cke}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
      deriving stock (Eq, Show)
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a1ckf x_a1ckg)
        = [SomePersistField x_a1ckf, SomePersistField x_a1ckg]
      fromPersistValues [x1_a1cki, x2_a1ckj]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a1cki
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a1ckj
      fromPersistValues x_a1ckh
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a1ckh))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a1ckk x_a1ckl)
        = [toPersistValue x_a1ckk, toPersistValue x_a1ckl]
      persistUniqueKeys (ImageBank _newsId_a1ckm _imageId_a1ckn)
        = [(UniqueImageBank _newsId_a1ckm) _imageId_a1ckn]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a1ckp) key_a1ckq
               -> (Entity key_a1ckq) value_a1ckp)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a1ckr value_a1cks) x_a1ckt
               -> (Entity key_a1ckr)
                    (case value_a1cks of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a1ckt, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a1ckr value_a1cks) x_a1ckt
               -> (Entity key_a1ckr)
                    (case value_a1cks of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a1ckt}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    data Category
      = Category {categoryLabel :: !T.Text,
                  categoryParent :: !(Maybe CategoryId)}
      deriving stock (Eq, Show)
    type CategoryId = Database.Persist.Key Category
    instance PersistEntity Category where
      type PersistEntityBackend Category = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Category = UniqueCategory T.Text
      newtype Database.Persist.Key Category
        = CategoryKey {unCategoryKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Category typ
        = (typ ~ CategoryId) => CategoryId |
          (typ ~ T.Text) => CategoryLabel |
          (typ ~ Maybe CategoryId) => CategoryParent
      keyToValues
        = ((: [])
             . (toPersistValue . (\ CategoryKey {unCategoryKey = x} -> x)))
      keyFromValues
        = (fmap CategoryKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Category")))
                     (EntityNameDB (T.pack "categories")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "CategoryId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=categories"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueCategory")))
                      (ConstraintNameDB (T.pack "unique_category")))
                     ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
                        GHC.Base.:| []))
                    []])
                [])
               [T.pack "Eq", T.pack "Show"])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "label"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "label"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "parent"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "parent"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "CategoryId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy CategoryId),
                                                                                                       fieldAttrs = [FieldAttrMaybe],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Category")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "CategoryId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Category x_a1cku x_a1ckv)
        = [SomePersistField x_a1cku, SomePersistField x_a1ckv]
      fromPersistValues [x1_a1ckx, x2_a1cky]
        = Category
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "label"))
                 . fromPersistValue)
                x1_a1ckx
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "categories")) (T.pack "parent"))
                 . fromPersistValue)
                x2_a1cky
      fromPersistValues x_a1ckw
        = (Left
             $ (mappend (T.pack "Category: fromPersistValues failed on: "))
                 (T.pack $ show x_a1ckw))
      persistUniqueToFieldNames UniqueCategory {}
        = ((FieldNameHS (T.pack "label"), FieldNameDB (T.pack "label"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueCategory x_a1ckz)
        = [toPersistValue x_a1ckz]
      persistUniqueKeys (Category _label_a1ckA _parent_a1ckB)
        = [UniqueCategory _label_a1ckA]
      persistFieldDef CategoryId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "CategoryId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef CategoryLabel
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "label"))
      persistFieldDef CategoryParent
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Category))
            (FieldNameHS (T.pack "parent"))
      persistIdField = CategoryId
      fieldLens CategoryId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a1ckD) key_a1ckE
               -> (Entity key_a1ckE) value_a1ckD)
      fieldLens CategoryLabel
        = (PTH.lensPTH ((\ Category {categoryLabel = x} -> x) . entityVal))
            (\ (Entity key_a1ckF value_a1ckG) x_a1ckH
               -> (Entity key_a1ckF)
                    (case value_a1ckG of
                       Category {categoryParent = categoryParent}
                         -> Category
                              {categoryLabel = x_a1ckH, categoryParent = categoryParent}))
      fieldLens CategoryParent
        = (PTH.lensPTH
             ((\ Category {categoryParent = x} -> x) . entityVal))
            (\ (Entity key_a1ckF value_a1ckG) x_a1ckH
               -> (Entity key_a1ckF)
                    (case value_a1ckG of
                       Category {categoryLabel = categoryLabel}
                         -> Category
                              {categoryLabel = categoryLabel, categoryParent = x_a1ckH}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Category where
      toBackendKey = \ CategoryKey {unCategoryKey = x} -> x
      fromBackendKey = CategoryKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Category where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Category where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "categoryId" News CategoryId where
      symbolToField = NewsCategoryId
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    instance SymbolToField "id" Category (Database.Persist.Key Category) where
      symbolToField = CategoryId
    instance SymbolToField "label" Category T.Text where
      symbolToField = CategoryLabel
    instance SymbolToField "parent" Category (Maybe CategoryId) where
      symbolToField = CategoryParent
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Category)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
