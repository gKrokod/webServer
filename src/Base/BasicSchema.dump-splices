/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(88,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \  images\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(88,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a8oZ) = [SomePersistField x_a8oZ]
      fromPersistValues [x1_a8p1]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a8p1
      fromPersistValues x_a8p0
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a8p0))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a8p2) = [toPersistValue x_a8p2]
      persistUniqueKeys (News _title_a8p3) = [UniqueNews _title_a8p3]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8p5) key_a8p6 -> (Entity key_a8p6) value_a8p5)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a8p7 value_a8p8) x_a8p9
               -> (Entity key_a8p7)
                    (case value_a8p8 of News {} -> News {newsTitle = x_a8p9}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a8pa x_a8pb)
        = [SomePersistField x_a8pa, SomePersistField x_a8pb]
      fromPersistValues [x1_a8pd, x2_a8pe]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_a8pd
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a8pe
      fromPersistValues x_a8pc
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a8pc))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Image _header_a8pf _base64_a8pg) = []
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8pi) key_a8pj -> (Entity key_a8pj) value_a8pi)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a8pk value_a8pl) x_a8pm
               -> (Entity key_a8pk)
                    (case value_a8pl of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a8pm, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a8pk value_a8pl) x_a8pm
               -> (Entity key_a8pk)
                    (case value_a8pl of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a8pm}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a8pn x_a8po)
        = [SomePersistField x_a8pn, SomePersistField x_a8po]
      fromPersistValues [x1_a8pq, x2_a8pr]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a8pq
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a8pr
      fromPersistValues x_a8pp
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a8pp))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a8ps x_a8pt)
        = [toPersistValue x_a8ps, toPersistValue x_a8pt]
      persistUniqueKeys (ImageBank _newsId_a8pu _imageId_a8pv)
        = [(UniqueImageBank _newsId_a8pu) _imageId_a8pv]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8px) key_a8py -> (Entity key_a8py) value_a8px)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a8pz value_a8pA) x_a8pB
               -> (Entity key_a8pz)
                    (case value_a8pA of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a8pB, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a8pz value_a8pA) x_a8pB
               -> (Entity key_a8pz)
                    (case value_a8pA of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a8pB}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Image) =>
             OnlyOneUniqueKey Image where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Image) =>
             AtLeastOneUniqueKey Image where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(87,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(87,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_ahLf) = [SomePersistField x_ahLf]
      fromPersistValues [x1_ahLh]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_ahLh
      fromPersistValues x_ahLg
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_ahLg))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_ahLi) = [toPersistValue x_ahLi]
      persistUniqueKeys (News _title_ahLj) = [UniqueNews _title_ahLj]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ahLl) key_ahLm -> (Entity key_ahLm) value_ahLl)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_ahLn value_ahLo) x_ahLp
               -> (Entity key_ahLn)
                    (case value_ahLo of News {} -> News {newsTitle = x_ahLp}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_ahLq x_ahLr)
        = [SomePersistField x_ahLq, SomePersistField x_ahLr]
      fromPersistValues [x1_ahLt, x2_ahLu]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_ahLt
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ahLu
      fromPersistValues x_ahLs
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_ahLs))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Image _header_ahLv _base64_ahLw) = []
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ahLy) key_ahLz -> (Entity key_ahLz) value_ahLy)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ahLA value_ahLB) x_ahLC
               -> (Entity key_ahLA)
                    (case value_ahLB of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_ahLC, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ahLA value_ahLB) x_ahLC
               -> (Entity key_ahLA)
                    (case value_ahLB of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_ahLC}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_ahLD x_ahLE)
        = [SomePersistField x_ahLD, SomePersistField x_ahLE]
      fromPersistValues [x1_ahLG, x2_ahLH]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_ahLG
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_ahLH
      fromPersistValues x_ahLF
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ahLF))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_ahLI x_ahLJ)
        = [toPersistValue x_ahLI, toPersistValue x_ahLJ]
      persistUniqueKeys (ImageBank _newsId_ahLK _imageId_ahLL)
        = [(UniqueImageBank _newsId_ahLK) _imageId_ahLL]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ahLN) key_ahLO -> (Entity key_ahLO) value_ahLN)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ahLP value_ahLQ) x_ahLR
               -> (Entity key_ahLP)
                    (case value_ahLQ of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_ahLR, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ahLP value_ahLQ) x_ahLR
               -> (Entity key_ahLP)
                    (case value_ahLQ of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_ahLR}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Image) =>
             OnlyOneUniqueKey Image where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Image) =>
             AtLeastOneUniqueKey Image where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(52,93)-(89,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(52,1)-(89,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_akib) = [SomePersistField x_akib]
      fromPersistValues [x1_akid]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_akid
      fromPersistValues x_akic
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_akic))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_akie) = [toPersistValue x_akie]
      persistUniqueKeys (News _title_akif) = [UniqueNews _title_akif]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_akih) key_akii -> (Entity key_akii) value_akih)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_akij value_akik) x_akil
               -> (Entity key_akij)
                    (case value_akik of News {} -> News {newsTitle = x_akil}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_akim x_akin)
        = [SomePersistField x_akim, SomePersistField x_akin]
      fromPersistValues [x1_akip, x2_akiq]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_akip
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_akiq
      fromPersistValues x_akio
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_akio))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Image _header_akir _base64_akis) = []
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_akiu) key_akiv -> (Entity key_akiv) value_akiu)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_akiw value_akix) x_akiy
               -> (Entity key_akiw)
                    (case value_akix of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_akiy, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_akiw value_akix) x_akiy
               -> (Entity key_akiw)
                    (case value_akix of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_akiy}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_akiz x_akiA)
        = [SomePersistField x_akiz, SomePersistField x_akiA]
      fromPersistValues [x1_akiC, x2_akiD]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_akiC
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_akiD
      fromPersistValues x_akiB
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_akiB))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_akiE x_akiF)
        = [toPersistValue x_akiE, toPersistValue x_akiF]
      persistUniqueKeys (ImageBank _newsId_akiG _imageId_akiH)
        = [(UniqueImageBank _newsId_akiG) _imageId_akiH]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_akiJ) key_akiK -> (Entity key_akiK) value_akiJ)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_akiL value_akiM) x_akiN
               -> (Entity key_akiL)
                    (case value_akiM of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_akiN, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_akiL value_akiM) x_akiN
               -> (Entity key_akiL)
                    (case value_akiM of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_akiN}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Image) =>
             OnlyOneUniqueKey Image where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Image) =>
             AtLeastOneUniqueKey Image where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(52,93)-(90,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(52,1)-(90,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_anfM) = [SomePersistField x_anfM]
      fromPersistValues [x1_anfO]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_anfO
      fromPersistValues x_anfN
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_anfN))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_anfP) = [toPersistValue x_anfP]
      persistUniqueKeys (News _title_anfQ) = [UniqueNews _title_anfQ]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_anfS) key_anfT -> (Entity key_anfT) value_anfS)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_anfU value_anfV) x_anfW
               -> (Entity key_anfU)
                    (case value_anfV of News {} -> News {newsTitle = x_anfW}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_anfX x_anfY)
        = [SomePersistField x_anfX, SomePersistField x_anfY]
      fromPersistValues [x1_ang0, x2_ang1]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_ang0
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ang1
      fromPersistValues x_anfZ
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_anfZ))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_ang2 x_ang3)
        = [toPersistValue x_ang2, toPersistValue x_ang3]
      persistUniqueKeys (Image _header_ang4 _base64_ang5)
        = [(UniqueImage _header_ang4) _base64_ang5]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ang7) key_ang8 -> (Entity key_ang8) value_ang7)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ang9 value_anga) x_angb
               -> (Entity key_ang9)
                    (case value_anga of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_angb, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ang9 value_anga) x_angb
               -> (Entity key_ang9)
                    (case value_anga of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_angb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_angc x_angd)
        = [SomePersistField x_angc, SomePersistField x_angd]
      fromPersistValues [x1_angf, x2_angg]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_angf
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_angg
      fromPersistValues x_ange
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ange))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_angh x_angi)
        = [toPersistValue x_angh, toPersistValue x_angi]
      persistUniqueKeys (ImageBank _newsId_angj _imageId_angk)
        = [(UniqueImageBank _newsId_angj) _imageId_angk]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_angm) key_angn -> (Entity key_angn) value_angm)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ango value_angp) x_angq
               -> (Entity key_ango)
                    (case value_angp of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_angq, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ango value_angp) x_angq
               -> (Entity key_ango)
                    (case value_angp of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_angq}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aqlY) = [SomePersistField x_aqlY]
      fromPersistValues [x1_aqm0]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aqm0
      fromPersistValues x_aqlZ
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aqlZ))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aqm1) = [toPersistValue x_aqm1]
      persistUniqueKeys (News _title_aqm2) = [UniqueNews _title_aqm2]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqm4) key_aqm5 -> (Entity key_aqm5) value_aqm4)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aqm6 value_aqm7) x_aqm8
               -> (Entity key_aqm6)
                    (case value_aqm7 of News {} -> News {newsTitle = x_aqm8}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aqm9 x_aqma)
        = [SomePersistField x_aqm9, SomePersistField x_aqma]
      fromPersistValues [x1_aqmc, x2_aqmd]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_aqmc
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aqmd
      fromPersistValues x_aqmb
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aqmb))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aqme x_aqmf)
        = [toPersistValue x_aqme, toPersistValue x_aqmf]
      persistUniqueKeys (Image _header_aqmg _base64_aqmh)
        = [(UniqueImage _header_aqmg) _base64_aqmh]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqmj) key_aqmk -> (Entity key_aqmk) value_aqmj)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aqml value_aqmm) x_aqmn
               -> (Entity key_aqml)
                    (case value_aqmm of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aqmn, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aqml value_aqmm) x_aqmn
               -> (Entity key_aqml)
                    (case value_aqmm of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aqmn}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aqmo x_aqmp)
        = [SomePersistField x_aqmo, SomePersistField x_aqmp]
      fromPersistValues [x1_aqmr, x2_aqms]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aqmr
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aqms
      fromPersistValues x_aqmq
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aqmq))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aqmt x_aqmu)
        = [toPersistValue x_aqmt, toPersistValue x_aqmu]
      persistUniqueKeys (ImageBank _newsId_aqmv _imageId_aqmw)
        = [(UniqueImageBank _newsId_aqmv) _imageId_aqmw]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqmy) key_aqmz -> (Entity key_aqmz) value_aqmy)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aqmA value_aqmB) x_aqmC
               -> (Entity key_aqmA)
                    (case value_aqmB of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aqmC, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aqmA value_aqmB) x_aqmC
               -> (Entity key_aqmA)
                    (case value_aqmB of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aqmC}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aqEE) = [SomePersistField x_aqEE]
      fromPersistValues [x1_aqEG]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aqEG
      fromPersistValues x_aqEF
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aqEF))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aqEH) = [toPersistValue x_aqEH]
      persistUniqueKeys (News _title_aqEI) = [UniqueNews _title_aqEI]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqEK) key_aqEL -> (Entity key_aqEL) value_aqEK)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aqEM value_aqEN) x_aqEO
               -> (Entity key_aqEM)
                    (case value_aqEN of News {} -> News {newsTitle = x_aqEO}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aqEP x_aqEQ)
        = [SomePersistField x_aqEP, SomePersistField x_aqEQ]
      fromPersistValues [x1_aqES, x2_aqET]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_aqES
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aqET
      fromPersistValues x_aqER
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aqER))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aqEU x_aqEV)
        = [toPersistValue x_aqEU, toPersistValue x_aqEV]
      persistUniqueKeys (Image _header_aqEW _base64_aqEX)
        = [(UniqueImage _header_aqEW) _base64_aqEX]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqEZ) key_aqF0 -> (Entity key_aqF0) value_aqEZ)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aqF1 value_aqF2) x_aqF3
               -> (Entity key_aqF1)
                    (case value_aqF2 of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aqF3, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aqF1 value_aqF2) x_aqF3
               -> (Entity key_aqF1)
                    (case value_aqF2 of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aqF3}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aqF4 x_aqF5)
        = [SomePersistField x_aqF4, SomePersistField x_aqF5]
      fromPersistValues [x1_aqF7, x2_aqF8]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aqF7
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aqF8
      fromPersistValues x_aqF6
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aqF6))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aqF9 x_aqFa)
        = [toPersistValue x_aqF9, toPersistValue x_aqFa]
      persistUniqueKeys (ImageBank _newsId_aqFb _imageId_aqFc)
        = [(UniqueImageBank _newsId_aqFb) _imageId_aqFc]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aqFe) key_aqFf -> (Entity key_aqFf) value_aqFe)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aqFg value_aqFh) x_aqFi
               -> (Entity key_aqFg)
                    (case value_aqFh of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aqFi, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aqFg value_aqFh) x_aqFi
               -> (Entity key_aqFg)
                    (case value_aqFh of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aqFi}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql = images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_atD7) = [SomePersistField x_atD7]
      fromPersistValues [x1_atD9]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_atD9
      fromPersistValues x_atD8
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_atD8))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_atDa) = [toPersistValue x_atDa]
      persistUniqueKeys (News _title_atDb) = [UniqueNews _title_atDb]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atDd) key_atDe -> (Entity key_atDe) value_atDd)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_atDf value_atDg) x_atDh
               -> (Entity key_atDf)
                    (case value_atDg of News {} -> News {newsTitle = x_atDh}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_atDi x_atDj)
        = [SomePersistField x_atDi, SomePersistField x_atDj]
      fromPersistValues [x1_atDl, x2_atDm]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_atDl
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_atDm
      fromPersistValues x_atDk
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_atDk))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_atDn x_atDo)
        = [toPersistValue x_atDn, toPersistValue x_atDo]
      persistUniqueKeys (Image _header_atDp _base64_atDq)
        = [(UniqueImage _header_atDp) _base64_atDq]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atDs) key_atDt -> (Entity key_atDt) value_atDs)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_atDu value_atDv) x_atDw
               -> (Entity key_atDu)
                    (case value_atDv of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_atDw, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_atDu value_atDv) x_atDw
               -> (Entity key_atDu)
                    (case value_atDv of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_atDw}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_atDx x_atDy)
        = [SomePersistField x_atDx, SomePersistField x_atDy]
      fromPersistValues [x1_atDA, x2_atDB]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_atDA
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_atDB
      fromPersistValues x_atDz
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_atDz))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_atDC x_atDD)
        = [toPersistValue x_atDC, toPersistValue x_atDD]
      persistUniqueKeys (ImageBank _newsId_atDE _imageId_atDF)
        = [(UniqueImageBank _newsId_atDE) _imageId_atDF]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_atDH) key_atDI -> (Entity key_atDI) value_atDH)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_atDJ value_atDK) x_atDL
               -> (Entity key_atDJ)
                    (case value_atDK of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_atDL, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_atDJ value_atDK) x_atDL
               -> (Entity key_atDJ)
                    (case value_atDK of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_atDL}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql = images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_awhb) = [SomePersistField x_awhb]
      fromPersistValues [x1_awhd]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_awhd
      fromPersistValues x_awhc
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_awhc))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_awhe) = [toPersistValue x_awhe]
      persistUniqueKeys (News _title_awhf) = [UniqueNews _title_awhf]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_awhh) key_awhi -> (Entity key_awhi) value_awhh)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_awhj value_awhk) x_awhl
               -> (Entity key_awhj)
                    (case value_awhk of News {} -> News {newsTitle = x_awhl}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_awhm x_awhn)
        = [SomePersistField x_awhm, SomePersistField x_awhn]
      fromPersistValues [x1_awhp, x2_awhq]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_awhp
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_awhq
      fromPersistValues x_awho
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_awho))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_awhr x_awhs)
        = [toPersistValue x_awhr, toPersistValue x_awhs]
      persistUniqueKeys (Image _header_awht _base64_awhu)
        = [(UniqueImage _header_awht) _base64_awhu]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_awhw) key_awhx -> (Entity key_awhx) value_awhw)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_awhy value_awhz) x_awhA
               -> (Entity key_awhy)
                    (case value_awhz of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_awhA, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_awhy value_awhz) x_awhA
               -> (Entity key_awhy)
                    (case value_awhz of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_awhA}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_awhB x_awhC)
        = [SomePersistField x_awhB, SomePersistField x_awhC]
      fromPersistValues [x1_awhE, x2_awhF]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_awhE
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_awhF
      fromPersistValues x_awhD
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_awhD))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_awhG x_awhH)
        = [toPersistValue x_awhG, toPersistValue x_awhH]
      persistUniqueKeys (ImageBank _newsId_awhI _imageId_awhJ)
        = [(UniqueImageBank _newsId_awhI) _imageId_awhJ]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_awhL) key_awhM -> (Entity key_awhM) value_awhL)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_awhN value_awhO) x_awhP
               -> (Entity key_awhN)
                    (case value_awhO of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_awhP, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_awhN value_awhO) x_awhP
               -> (Entity key_awhN)
                    (case value_awhO of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_awhP}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql = images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_ayVf) = [SomePersistField x_ayVf]
      fromPersistValues [x1_ayVh]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_ayVh
      fromPersistValues x_ayVg
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_ayVg))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_ayVi) = [toPersistValue x_ayVi]
      persistUniqueKeys (News _title_ayVj) = [UniqueNews _title_ayVj]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ayVl) key_ayVm -> (Entity key_ayVm) value_ayVl)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_ayVn value_ayVo) x_ayVp
               -> (Entity key_ayVn)
                    (case value_ayVo of News {} -> News {newsTitle = x_ayVp}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_ayVq x_ayVr)
        = [SomePersistField x_ayVq, SomePersistField x_ayVr]
      fromPersistValues [x1_ayVt, x2_ayVu]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_ayVt
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ayVu
      fromPersistValues x_ayVs
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_ayVs))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_ayVv x_ayVw)
        = [toPersistValue x_ayVv, toPersistValue x_ayVw]
      persistUniqueKeys (Image _header_ayVx _base64_ayVy)
        = [(UniqueImage _header_ayVx) _base64_ayVy]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ayVA) key_ayVB -> (Entity key_ayVB) value_ayVA)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ayVC value_ayVD) x_ayVE
               -> (Entity key_ayVC)
                    (case value_ayVD of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_ayVE, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ayVC value_ayVD) x_ayVE
               -> (Entity key_ayVC)
                    (case value_ayVD of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_ayVE}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_ayVF x_ayVG)
        = [SomePersistField x_ayVF, SomePersistField x_ayVG]
      fromPersistValues [x1_ayVI, x2_ayVJ]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_ayVI
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_ayVJ
      fromPersistValues x_ayVH
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ayVH))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_ayVK x_ayVL)
        = [toPersistValue x_ayVK, toPersistValue x_ayVL]
      persistUniqueKeys (ImageBank _newsId_ayVM _imageId_ayVN)
        = [(UniqueImageBank _newsId_ayVM) _imageId_ayVN]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ayVP) key_ayVQ -> (Entity key_ayVQ) value_ayVP)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ayVR value_ayVS) x_ayVT
               -> (Entity key_ayVR)
                    (case value_ayVS of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_ayVT, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ayVR value_ayVS) x_ayVT
               -> (Entity key_ayVR)
                    (case value_ayVS of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_ayVT}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news1111\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql = images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news1111")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news1111"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news1111")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news1111"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news1111")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news1111"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aBw9) = [SomePersistField x_aBw9]
      fromPersistValues [x1_aBwb]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news1111")) (T.pack "title"))
                 . fromPersistValue)
                x1_aBwb
      fromPersistValues x_aBwa
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aBwa))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aBwc) = [toPersistValue x_aBwc]
      persistUniqueKeys (News _title_aBwd) = [UniqueNews _title_aBwd]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBwf) key_aBwg -> (Entity key_aBwg) value_aBwf)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aBwh value_aBwi) x_aBwj
               -> (Entity key_aBwh)
                    (case value_aBwi of News {} -> News {newsTitle = x_aBwj}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aBwk x_aBwl)
        = [SomePersistField x_aBwk, SomePersistField x_aBwl]
      fromPersistValues [x1_aBwn, x2_aBwo]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_aBwn
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aBwo
      fromPersistValues x_aBwm
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aBwm))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aBwp x_aBwq)
        = [toPersistValue x_aBwp, toPersistValue x_aBwq]
      persistUniqueKeys (Image _header_aBwr _base64_aBws)
        = [(UniqueImage _header_aBwr) _base64_aBws]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBwu) key_aBwv -> (Entity key_aBwv) value_aBwu)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aBww value_aBwx) x_aBwy
               -> (Entity key_aBww)
                    (case value_aBwx of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aBwy, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aBww value_aBwx) x_aBwy
               -> (Entity key_aBww)
                    (case value_aBwx of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aBwy}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aBwz x_aBwA)
        = [SomePersistField x_aBwz, SomePersistField x_aBwA]
      fromPersistValues [x1_aBwC, x2_aBwD]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aBwC
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aBwD
      fromPersistValues x_aBwB
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aBwB))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aBwE x_aBwF)
        = [toPersistValue x_aBwE, toPersistValue x_aBwF]
      persistUniqueKeys (ImageBank _newsId_aBwG _imageId_aBwH)
        = [(UniqueImageBank _newsId_aBwG) _imageId_aBwH]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aBwJ) key_aBwK -> (Entity key_aBwK) value_aBwJ)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aBwL value_aBwM) x_aBwN
               -> (Entity key_aBwL)
                    (case value_aBwM of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aBwN, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aBwL value_aBwM) x_aBwN
               -> (Entity key_aBwL)
                    (case value_aBwM of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aBwN}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aEed) = [SomePersistField x_aEed]
      fromPersistValues [x1_aEef]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aEef
      fromPersistValues x_aEee
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aEee))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aEeg) = [toPersistValue x_aEeg]
      persistUniqueKeys (News _title_aEeh) = [UniqueNews _title_aEeh]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aEej) key_aEek -> (Entity key_aEek) value_aEej)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aEel value_aEem) x_aEen
               -> (Entity key_aEel)
                    (case value_aEem of News {} -> News {newsTitle = x_aEen}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aEeo x_aEep)
        = [SomePersistField x_aEeo, SomePersistField x_aEep]
      fromPersistValues [x1_aEer, x2_aEes]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aEer
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aEes
      fromPersistValues x_aEeq
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aEeq))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aEet x_aEeu)
        = [toPersistValue x_aEet, toPersistValue x_aEeu]
      persistUniqueKeys (Image _header_aEev _base64_aEew)
        = [(UniqueImage _header_aEev) _base64_aEew]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aEey) key_aEez -> (Entity key_aEez) value_aEey)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aEeA value_aEeB) x_aEeC
               -> (Entity key_aEeA)
                    (case value_aEeB of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aEeC, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aEeA value_aEeB) x_aEeC
               -> (Entity key_aEeA)
                    (case value_aEeB of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aEeC}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aEeD x_aEeE)
        = [SomePersistField x_aEeD, SomePersistField x_aEeE]
      fromPersistValues [x1_aEeG, x2_aEeH]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aEeG
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aEeH
      fromPersistValues x_aEeF
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aEeF))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aEeI x_aEeJ)
        = [toPersistValue x_aEeI, toPersistValue x_aEeJ]
      persistUniqueKeys (ImageBank _newsId_aEeK _imageId_aEeL)
        = [(UniqueImageBank _newsId_aEeK) _imageId_aEeL]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aEeN) key_aEeO -> (Entity key_aEeO) value_aEeN)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aEeP value_aEeQ) x_aEeR
               -> (Entity key_aEeP)
                    (case value_aEeQ of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aEeR, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aEeP value_aEeQ) x_aEeR
               -> (Entity key_aEeP)
                    (case value_aEeQ of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aEeR}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,93)-(94,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(56,1)-(94,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aIcn) = [SomePersistField x_aIcn]
      fromPersistValues [x1_aIcp]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aIcp
      fromPersistValues x_aIco
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aIco))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aIcq) = [toPersistValue x_aIcq]
      persistUniqueKeys (News _title_aIcr) = [UniqueNews _title_aIcr]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aIct) key_aIcu -> (Entity key_aIcu) value_aIct)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aIcv value_aIcw) x_aIcx
               -> (Entity key_aIcv)
                    (case value_aIcw of News {} -> News {newsTitle = x_aIcx}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aIcy x_aIcz)
        = [SomePersistField x_aIcy, SomePersistField x_aIcz]
      fromPersistValues [x1_aIcB, x2_aIcC]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aIcB
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aIcC
      fromPersistValues x_aIcA
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aIcA))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aIcD x_aIcE)
        = [toPersistValue x_aIcD, toPersistValue x_aIcE]
      persistUniqueKeys (Image _header_aIcF _base64_aIcG)
        = [(UniqueImage _header_aIcF) _base64_aIcG]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aIcI) key_aIcJ -> (Entity key_aIcJ) value_aIcI)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aIcK value_aIcL) x_aIcM
               -> (Entity key_aIcK)
                    (case value_aIcL of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aIcM, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aIcK value_aIcL) x_aIcM
               -> (Entity key_aIcK)
                    (case value_aIcL of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aIcM}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aIcN x_aIcO)
        = [SomePersistField x_aIcN, SomePersistField x_aIcO]
      fromPersistValues [x1_aIcQ, x2_aIcR]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aIcQ
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aIcR
      fromPersistValues x_aIcP
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aIcP))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aIcS x_aIcT)
        = [toPersistValue x_aIcS, toPersistValue x_aIcT]
      persistUniqueKeys (ImageBank _newsId_aIcU _imageId_aIcV)
        = [(UniqueImageBank _newsId_aIcU) _imageId_aIcV]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aIcX) key_aIcY -> (Entity key_aIcY) value_aIcX)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aIcZ value_aId0) x_aId1
               -> (Entity key_aIcZ)
                    (case value_aId0 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aId1, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aIcZ value_aId0) x_aId1
               -> (Entity key_aIcZ)
                    (case value_aId0 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aId1}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,93)-(97,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,1)-(97,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aLc7) = [SomePersistField x_aLc7]
      fromPersistValues [x1_aLc9]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aLc9
      fromPersistValues x_aLc8
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aLc8))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aLca) = [toPersistValue x_aLca]
      persistUniqueKeys (News _title_aLcb) = [UniqueNews _title_aLcb]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aLcd) key_aLce -> (Entity key_aLce) value_aLcd)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aLcf value_aLcg) x_aLch
               -> (Entity key_aLcf)
                    (case value_aLcg of News {} -> News {newsTitle = x_aLch}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aLci x_aLcj)
        = [SomePersistField x_aLci, SomePersistField x_aLcj]
      fromPersistValues [x1_aLcl, x2_aLcm]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aLcl
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aLcm
      fromPersistValues x_aLck
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aLck))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aLcn x_aLco)
        = [toPersistValue x_aLcn, toPersistValue x_aLco]
      persistUniqueKeys (Image _header_aLcp _base64_aLcq)
        = [(UniqueImage _header_aLcp) _base64_aLcq]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aLcs) key_aLct -> (Entity key_aLct) value_aLcs)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aLcu value_aLcv) x_aLcw
               -> (Entity key_aLcu)
                    (case value_aLcv of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aLcw, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aLcu value_aLcv) x_aLcw
               -> (Entity key_aLcu)
                    (case value_aLcv of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aLcw}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aLcx x_aLcy)
        = [SomePersistField x_aLcx, SomePersistField x_aLcy]
      fromPersistValues [x1_aLcA, x2_aLcB]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aLcA
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aLcB
      fromPersistValues x_aLcz
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aLcz))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aLcC x_aLcD)
        = [toPersistValue x_aLcC, toPersistValue x_aLcD]
      persistUniqueKeys (ImageBank _newsId_aLcE _imageId_aLcF)
        = [(UniqueImageBank _newsId_aLcE) _imageId_aLcF]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aLcH) key_aLcI -> (Entity key_aLcI) value_aLcH)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aLcJ value_aLcK) x_aLcL
               -> (Entity key_aLcJ)
                    (case value_aLcK of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aLcL, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aLcJ value_aLcK) x_aLcL
               -> (Entity key_aLcJ)
                    (case value_aLcK of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aLcL}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,93)-(97,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,1)-(97,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aO6f) = [SomePersistField x_aO6f]
      fromPersistValues [x1_aO6h]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aO6h
      fromPersistValues x_aO6g
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aO6g))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aO6i) = [toPersistValue x_aO6i]
      persistUniqueKeys (News _title_aO6j) = [UniqueNews _title_aO6j]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aO6l) key_aO6m -> (Entity key_aO6m) value_aO6l)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aO6n value_aO6o) x_aO6p
               -> (Entity key_aO6n)
                    (case value_aO6o of News {} -> News {newsTitle = x_aO6p}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aO6q x_aO6r)
        = [SomePersistField x_aO6q, SomePersistField x_aO6r]
      fromPersistValues [x1_aO6t, x2_aO6u]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aO6t
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aO6u
      fromPersistValues x_aO6s
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aO6s))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aO6v x_aO6w)
        = [toPersistValue x_aO6v, toPersistValue x_aO6w]
      persistUniqueKeys (Image _header_aO6x _base64_aO6y)
        = [(UniqueImage _header_aO6x) _base64_aO6y]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aO6A) key_aO6B -> (Entity key_aO6B) value_aO6A)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aO6C value_aO6D) x_aO6E
               -> (Entity key_aO6C)
                    (case value_aO6D of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aO6E, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aO6C value_aO6D) x_aO6E
               -> (Entity key_aO6C)
                    (case value_aO6D of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aO6E}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aO6F x_aO6G)
        = [SomePersistField x_aO6F, SomePersistField x_aO6G]
      fromPersistValues [x1_aO6I, x2_aO6J]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aO6I
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aO6J
      fromPersistValues x_aO6H
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aO6H))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aO6K x_aO6L)
        = [toPersistValue x_aO6K, toPersistValue x_aO6L]
      persistUniqueKeys (ImageBank _newsId_aO6M _imageId_aO6N)
        = [(UniqueImageBank _newsId_aO6M) _imageId_aO6N]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aO6P) key_aO6Q -> (Entity key_aO6Q) value_aO6P)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aO6R value_aO6S) x_aO6T
               -> (Entity key_aO6R)
                    (case value_aO6S of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aO6T, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aO6R value_aO6S) x_aO6T
               -> (Entity key_aO6R)
                    (case value_aO6S of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aO6T}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,93)-(97,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(59,1)-(97,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aQHr) = [SomePersistField x_aQHr]
      fromPersistValues [x1_aQHt]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aQHt
      fromPersistValues x_aQHs
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aQHs))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aQHu) = [toPersistValue x_aQHu]
      persistUniqueKeys (News _title_aQHv) = [UniqueNews _title_aQHv]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aQHx) key_aQHy -> (Entity key_aQHy) value_aQHx)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aQHz value_aQHA) x_aQHB
               -> (Entity key_aQHz)
                    (case value_aQHA of News {} -> News {newsTitle = x_aQHB}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aQHC x_aQHD)
        = [SomePersistField x_aQHC, SomePersistField x_aQHD]
      fromPersistValues [x1_aQHF, x2_aQHG]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aQHF
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aQHG
      fromPersistValues x_aQHE
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aQHE))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aQHH x_aQHI)
        = [toPersistValue x_aQHH, toPersistValue x_aQHI]
      persistUniqueKeys (Image _header_aQHJ _base64_aQHK)
        = [(UniqueImage _header_aQHJ) _base64_aQHK]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aQHM) key_aQHN -> (Entity key_aQHN) value_aQHM)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aQHO value_aQHP) x_aQHQ
               -> (Entity key_aQHO)
                    (case value_aQHP of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aQHQ, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aQHO value_aQHP) x_aQHQ
               -> (Entity key_aQHO)
                    (case value_aQHP of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aQHQ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aQHR x_aQHS)
        = [SomePersistField x_aQHR, SomePersistField x_aQHS]
      fromPersistValues [x1_aQHU, x2_aQHV]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aQHU
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aQHV
      fromPersistValues x_aQHT
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aQHT))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aQHW x_aQHX)
        = [toPersistValue x_aQHW, toPersistValue x_aQHX]
      persistUniqueKeys (ImageBank _newsId_aQHY _imageId_aQHZ)
        = [(UniqueImageBank _newsId_aQHY) _imageId_aQHZ]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aQI1) key_aQI2 -> (Entity key_aQI2) value_aQI1)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aQI3 value_aQI4) x_aQI5
               -> (Entity key_aQI3)
                    (case value_aQI4 of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aQI5, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aQI3 value_aQI4) x_aQI5
               -> (Entity key_aQI3)
                    (case value_aQI4 of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aQI5}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(98,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(98,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aTiD) = [SomePersistField x_aTiD]
      fromPersistValues [x1_aTiF]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aTiF
      fromPersistValues x_aTiE
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aTiE))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aTiG) = [toPersistValue x_aTiG]
      persistUniqueKeys (News _title_aTiH) = [UniqueNews _title_aTiH]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aTiJ) key_aTiK -> (Entity key_aTiK) value_aTiJ)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aTiL value_aTiM) x_aTiN
               -> (Entity key_aTiL)
                    (case value_aTiM of News {} -> News {newsTitle = x_aTiN}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aTiO x_aTiP)
        = [SomePersistField x_aTiO, SomePersistField x_aTiP]
      fromPersistValues [x1_aTiR, x2_aTiS]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aTiR
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aTiS
      fromPersistValues x_aTiQ
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aTiQ))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aTiT x_aTiU)
        = [toPersistValue x_aTiT, toPersistValue x_aTiU]
      persistUniqueKeys (Image _header_aTiV _base64_aTiW)
        = [(UniqueImage _header_aTiV) _base64_aTiW]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aTiY) key_aTiZ -> (Entity key_aTiZ) value_aTiY)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aTj0 value_aTj1) x_aTj2
               -> (Entity key_aTj0)
                    (case value_aTj1 of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aTj2, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aTj0 value_aTj1) x_aTj2
               -> (Entity key_aTj0)
                    (case value_aTj1 of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aTj2}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aTj3 x_aTj4)
        = [SomePersistField x_aTj3, SomePersistField x_aTj4]
      fromPersistValues [x1_aTj6, x2_aTj7]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aTj6
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aTj7
      fromPersistValues x_aTj5
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aTj5))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aTj8 x_aTj9)
        = [toPersistValue x_aTj8, toPersistValue x_aTj9]
      persistUniqueKeys (ImageBank _newsId_aTja _imageId_aTjb)
        = [(UniqueImageBank _newsId_aTja) _imageId_aTjb]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aTjd) key_aTje -> (Entity key_aTje) value_aTjd)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aTjf value_aTjg) x_aTjh
               -> (Entity key_aTjf)
                    (case value_aTjg of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aTjh, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aTjf value_aTjg) x_aTjh
               -> (Entity key_aTjf)
                    (case value_aTjg of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aTjh}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(98,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(98,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aVTP) = [SomePersistField x_aVTP]
      fromPersistValues [x1_aVTR]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aVTR
      fromPersistValues x_aVTQ
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aVTQ))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aVTS) = [toPersistValue x_aVTS]
      persistUniqueKeys (News _title_aVTT) = [UniqueNews _title_aVTT]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aVTV) key_aVTW -> (Entity key_aVTW) value_aVTV)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aVTX value_aVTY) x_aVTZ
               -> (Entity key_aVTX)
                    (case value_aVTY of News {} -> News {newsTitle = x_aVTZ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aVU0 x_aVU1)
        = [SomePersistField x_aVU0, SomePersistField x_aVU1]
      fromPersistValues [x1_aVU3, x2_aVU4]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aVU3
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aVU4
      fromPersistValues x_aVU2
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aVU2))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aVU5 x_aVU6)
        = [toPersistValue x_aVU5, toPersistValue x_aVU6]
      persistUniqueKeys (Image _header_aVU7 _base64_aVU8)
        = [(UniqueImage _header_aVU7) _base64_aVU8]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aVUa) key_aVUb -> (Entity key_aVUb) value_aVUa)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aVUc value_aVUd) x_aVUe
               -> (Entity key_aVUc)
                    (case value_aVUd of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aVUe, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aVUc value_aVUd) x_aVUe
               -> (Entity key_aVUc)
                    (case value_aVUd of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aVUe}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aVUf x_aVUg)
        = [SomePersistField x_aVUf, SomePersistField x_aVUg]
      fromPersistValues [x1_aVUi, x2_aVUj]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aVUi
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aVUj
      fromPersistValues x_aVUh
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aVUh))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aVUk x_aVUl)
        = [toPersistValue x_aVUk, toPersistValue x_aVUl]
      persistUniqueKeys (ImageBank _newsId_aVUm _imageId_aVUn)
        = [(UniqueImageBank _newsId_aVUm) _imageId_aVUn]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aVUp) key_aVUq -> (Entity key_aVUq) value_aVUp)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aVUr value_aVUs) x_aVUt
               -> (Entity key_aVUr)
                    (case value_aVUs of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aVUt, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aVUr value_aVUs) x_aVUt
               -> (Entity key_aVUr)
                    (case value_aVUs of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aVUt}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(98,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(98,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_aYv1) = [SomePersistField x_aYv1]
      fromPersistValues [x1_aYv3]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_aYv3
      fromPersistValues x_aYv2
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_aYv2))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_aYv4) = [toPersistValue x_aYv4]
      persistUniqueKeys (News _title_aYv5) = [UniqueNews _title_aYv5]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aYv7) key_aYv8 -> (Entity key_aYv8) value_aYv7)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_aYv9 value_aYva) x_aYvb
               -> (Entity key_aYv9)
                    (case value_aYva of News {} -> News {newsTitle = x_aYvb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_aYvc x_aYvd)
        = [SomePersistField x_aYvc, SomePersistField x_aYvd]
      fromPersistValues [x1_aYvf, x2_aYvg]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_aYvf
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_aYvg
      fromPersistValues x_aYve
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_aYve))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_aYvh x_aYvi)
        = [toPersistValue x_aYvh, toPersistValue x_aYvi]
      persistUniqueKeys (Image _header_aYvj _base64_aYvk)
        = [(UniqueImage _header_aYvj) _base64_aYvk]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aYvm) key_aYvn -> (Entity key_aYvn) value_aYvm)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_aYvo value_aYvp) x_aYvq
               -> (Entity key_aYvo)
                    (case value_aYvp of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_aYvq, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_aYvo value_aYvp) x_aYvq
               -> (Entity key_aYvo)
                    (case value_aYvp of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_aYvq}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_aYvr x_aYvs)
        = [SomePersistField x_aYvr, SomePersistField x_aYvs]
      fromPersistValues [x1_aYvu, x2_aYvv]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_aYvu
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_aYvv
      fromPersistValues x_aYvt
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_aYvt))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_aYvw x_aYvx)
        = [toPersistValue x_aYvw, toPersistValue x_aYvx]
      persistUniqueKeys (ImageBank _newsId_aYvy _imageId_aYvz)
        = [(UniqueImageBank _newsId_aYvy) _imageId_aYvz]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_aYvB) key_aYvC -> (Entity key_aYvC) value_aYvB)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_aYvD value_aYvE) x_aYvF
               -> (Entity key_aYvD)
                    (case value_aYvE of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_aYvF, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_aYvD value_aYvE) x_aYvF
               -> (Entity key_aYvD)
                    (case value_aYvE of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_aYvF}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,93)-(98,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \ News sql=news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \ Image sql=images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \  UniqueImage header base64\n\
      \ ImageBank sql=images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "images")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                     (ConstraintNameDB (T.pack "unique_image")))
                    ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "images_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql=images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(60,1)-(98,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "images")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                        (ConstraintNameDB (T.pack "unique_image")))
                       ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "images_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql=images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_a116d) = [SomePersistField x_a116d]
      fromPersistValues [x1_a116f]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_a116f
      fromPersistValues x_a116e
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_a116e))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_a116g)
        = [toPersistValue x_a116g]
      persistUniqueKeys (News _title_a116h) = [UniqueNews _title_a116h]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a116j) key_a116k
               -> (Entity key_a116k) value_a116j)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_a116l value_a116m) x_a116n
               -> (Entity key_a116l)
                    (case value_a116m of News {} -> News {newsTitle = x_a116n}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image = UniqueImage T.Text T.Text
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "images")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImage")))
                      (ConstraintNameDB (T.pack "unique_image")))
                     ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_a116o x_a116p)
        = [SomePersistField x_a116o, SomePersistField x_a116p]
      fromPersistValues [x1_a116r, x2_a116s]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "header"))
                 . fromPersistValue)
                x1_a116r
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images")) (T.pack "base64"))
                 . fromPersistValue)
                x2_a116s
      fromPersistValues x_a116q
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_a116q))
      persistUniqueToFieldNames UniqueImage {}
        = ((FieldNameHS (T.pack "header"), FieldNameDB (T.pack "header"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "base64"), FieldNameDB (T.pack "base64"))])
      persistUniqueToValues (UniqueImage x_a116t x_a116u)
        = [toPersistValue x_a116t, toPersistValue x_a116u]
      persistUniqueKeys (Image _header_a116v _base64_a116w)
        = [(UniqueImage _header_a116v) _base64_a116w]
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a116y) key_a116z
               -> (Entity key_a116z) value_a116y)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_a116A value_a116B) x_a116C
               -> (Entity key_a116A)
                    (case value_a116B of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_a116C, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_a116A value_a116B) x_a116C
               -> (Entity key_a116A)
                    (case value_a116B of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_a116C}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "images_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql=images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_a116D x_a116E)
        = [SomePersistField x_a116D, SomePersistField x_a116E]
      fromPersistValues [x1_a116G, x2_a116H]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_a116G
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "images_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_a116H
      fromPersistValues x_a116F
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_a116F))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_a116I x_a116J)
        = [toPersistValue x_a116I, toPersistValue x_a116J]
      persistUniqueKeys (ImageBank _newsId_a116K _imageId_a116L)
        = [(UniqueImageBank _newsId_a116K) _imageId_a116L]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a116N) key_a116O
               -> (Entity key_a116O) value_a116N)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_a116P value_a116Q) x_a116R
               -> (Entity key_a116P)
                    (case value_a116Q of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_a116R, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_a116P value_a116Q) x_a116R
               -> (Entity key_a116P)
                    (case value_a116Q of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_a116R}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey Image where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey Image where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
