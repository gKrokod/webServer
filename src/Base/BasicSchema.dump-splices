/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(85,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \Person\n\
      \    name String\n\
      \Store\n\
      \    name String\n\
      \PersonStore\n\
      \    personId PersonId\n\
      \    storeId StoreId\n\
      \    UniquePersonStore personId storeId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Person")))
                    (EntityNameDB (T.pack "person")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Store")))
                    (EntityNameDB (T.pack "store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "StoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "PersonStore")))
                    (EntityNameDB (T.pack "person_store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                     (ConstraintNameDB (T.pack "unique_person_store")))
                    ((FieldNameHS (T.pack "personId"), 
                      FieldNameDB (T.pack "person_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "storeId"), 
                           FieldNameDB (T.pack "store_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "personId")))
                (FieldNameDB (T.pack "person_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "PersonId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "storeId")))
                (FieldNameDB (T.pack "store_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "StoreId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(85,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Person")))
                       (EntityNameDB (T.pack "person")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Store")))
                       (EntityNameDB (T.pack "store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "StoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "PersonStore")))
                       (EntityNameDB (T.pack "person_store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                        (ConstraintNameDB (T.pack "unique_person_store")))
                       ((FieldNameHS (T.pack "personId"), 
                         FieldNameDB (T.pack "person_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "storeId"), 
                              FieldNameDB (T.pack "store_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "personId")))
                   (FieldNameDB (T.pack "person_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "PersonId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "storeId")))
                   (FieldNameDB (T.pack "store_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "StoreId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField Person where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Person where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Store where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Store where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField PersonStore where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["personId", "storeId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql PersonStore where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data Person = Person {personName :: !String}
    type PersonId = Database.Persist.Key Person
    instance PersistEntity Person where
      type PersistEntityBackend Person = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Person
      newtype Database.Persist.Key Person
        = PersonKey {unPersonKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Person typ
        = (typ ~ PersonId) => PersonId | (typ ~ String) => PersonName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Person")))
                     (EntityNameDB (T.pack "person")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_a8ql) = [SomePersistField x_a8ql]
      fromPersistValues [x1_a8qn]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person")) (T.pack "name"))
                 . fromPersistValue)
                x1_a8qn
      fromPersistValues x_a8qm
        = (Left
             $ (mappend (T.pack "Person: fromPersistValues failed on: "))
                 (T.pack $ show x_a8qm))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person _name_a8qo) = []
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Person))
            (FieldNameHS (T.pack "name"))
      persistIdField = PersonId
      fieldLens PersonId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8qq) key_a8qr -> (Entity key_a8qr) value_a8qq)
      fieldLens PersonName
        = (PTH.lensPTH ((\ Person {personName = x} -> x) . entityVal))
            (\ (Entity key_a8qs value_a8qt) x_a8qu
               -> (Entity key_a8qs)
                    (case value_a8qt of Person {} -> Person {personName = x_a8qu}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Person where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    data Store = Store {storeName :: !String}
    type StoreId = Database.Persist.Key Store
    instance PersistEntity Store where
      type PersistEntityBackend Store = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Store
      newtype Database.Persist.Key Store
        = StoreKey {unStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Store typ
        = (typ ~ StoreId) => StoreId | (typ ~ String) => StoreName
      keyToValues
        = ((: []) . (toPersistValue . (\ StoreKey {unStoreKey = x} -> x)))
      keyFromValues
        = (fmap StoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Store")))
                     (EntityNameDB (T.pack "store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "StoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "StoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Store x_a8qv) = [SomePersistField x_a8qv]
      fromPersistValues [x1_a8qx]
        = Store
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "store")) (T.pack "name"))
                 . fromPersistValue)
                x1_a8qx
      fromPersistValues x_a8qw
        = (Left
             $ (mappend (T.pack "Store: fromPersistValues failed on: "))
                 (T.pack $ show x_a8qw))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Store _name_a8qy) = []
      persistFieldDef StoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "StoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef StoreName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Store))
            (FieldNameHS (T.pack "name"))
      persistIdField = StoreId
      fieldLens StoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8qA) key_a8qB -> (Entity key_a8qB) value_a8qA)
      fieldLens StoreName
        = (PTH.lensPTH ((\ Store {storeName = x} -> x) . entityVal))
            (\ (Entity key_a8qC value_a8qD) x_a8qE
               -> (Entity key_a8qC)
                    (case value_a8qD of Store {} -> Store {storeName = x_a8qE}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Store where
      toBackendKey = \ StoreKey {unStoreKey = x} -> x
      fromBackendKey = StoreKey
    data PersonStore
      = PersonStore {personStorePersonId :: !PersonId,
                     personStoreStoreId :: !StoreId}
    type PersonStoreId = Database.Persist.Key PersonStore
    instance PersistEntity PersonStore where
      type PersistEntityBackend PersonStore = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique PersonStore = UniquePersonStore PersonId StoreId
      newtype Database.Persist.Key PersonStore
        = PersonStoreKey {unPersonStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField PersonStore typ
        = (typ ~ PersonStoreId) => PersonStoreId |
          (typ ~ PersonId) => PersonStorePersonId |
          (typ ~ StoreId) => PersonStoreStoreId
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonStoreKey {unPersonStoreKey = x} -> x)))
      keyFromValues
        = (fmap PersonStoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "PersonStore")))
                     (EntityNameDB (T.pack "person_store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                      (ConstraintNameDB (T.pack "unique_person_store")))
                     ((FieldNameHS (T.pack "personId"), 
                       FieldNameDB (T.pack "person_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "storeId"), 
                            FieldNameDB (T.pack "store_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "personId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "person_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "PersonId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy PersonId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Person")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "storeId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "store_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "StoreId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy StoreId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Store")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonStoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonStore x_a8qF x_a8qG)
        = [SomePersistField x_a8qF, SomePersistField x_a8qG]
      fromPersistValues [x1_a8qI, x2_a8qJ]
        = PersonStore
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "personId"))
                 . fromPersistValue)
                x1_a8qI
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "storeId"))
                 . fromPersistValue)
                x2_a8qJ
      fromPersistValues x_a8qH
        = (Left
             $ (mappend (T.pack "PersonStore: fromPersistValues failed on: "))
                 (T.pack $ show x_a8qH))
      persistUniqueToFieldNames UniquePersonStore {}
        = ((FieldNameHS (T.pack "personId"), 
            FieldNameDB (T.pack "person_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "storeId"), 
                 FieldNameDB (T.pack "store_id"))])
      persistUniqueToValues (UniquePersonStore x_a8qK x_a8qL)
        = [toPersistValue x_a8qK, toPersistValue x_a8qL]
      persistUniqueKeys (PersonStore _personId_a8qM _storeId_a8qN)
        = [(UniquePersonStore _personId_a8qM) _storeId_a8qN]
      persistFieldDef PersonStoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonStorePersonId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "personId"))
      persistFieldDef PersonStoreStoreId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "storeId"))
      persistIdField = PersonStoreId
      fieldLens PersonStoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_a8qP) key_a8qQ -> (Entity key_a8qQ) value_a8qP)
      fieldLens PersonStorePersonId
        = (PTH.lensPTH
             ((\ PersonStore {personStorePersonId = x} -> x) . entityVal))
            (\ (Entity key_a8qR value_a8qS) x_a8qT
               -> (Entity key_a8qR)
                    (case value_a8qS of
                       PersonStore {personStoreStoreId = personStoreStoreId}
                         -> PersonStore
                              {personStorePersonId = x_a8qT,
                               personStoreStoreId = personStoreStoreId}))
      fieldLens PersonStoreStoreId
        = (PTH.lensPTH
             ((\ PersonStore {personStoreStoreId = x} -> x) . entityVal))
            (\ (Entity key_a8qR value_a8qS) x_a8qT
               -> (Entity key_a8qR)
                    (case value_a8qS of
                       PersonStore {personStorePersonId = personStorePersonId}
                         -> PersonStore
                              {personStorePersonId = personStorePersonId,
                               personStoreStoreId = x_a8qT}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend PersonStore where
      toBackendKey = \ PersonStoreKey {unPersonStoreKey = x} -> x
      fromBackendKey = PersonStoreKey
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Person) =>
             OnlyOneUniqueKey Person where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Person) =>
             AtLeastOneUniqueKey Person where
      requireUniquesP _ = error "impossible"
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Store) =>
             OnlyOneUniqueKey Store where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Store) =>
             AtLeastOneUniqueKey Store where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey PersonStore where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey PersonStore where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" Person (Database.Persist.Key Person) where
      symbolToField = PersonId
    instance SymbolToField "name" Person String where
      symbolToField = PersonName
    instance SymbolToField "id" Store (Database.Persist.Key Store) where
      symbolToField = StoreId
    instance SymbolToField "name" Store String where
      symbolToField = StoreName
    instance SymbolToField "id" PersonStore (Database.Persist.Key PersonStore) where
      symbolToField = PersonStoreId
    instance SymbolToField "personId" PersonStore PersonId where
      symbolToField = PersonStorePersonId
    instance SymbolToField "storeId" PersonStore StoreId where
      symbolToField = PersonStoreStoreId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Person),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Store),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(85,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \Person\n\
      \    name String\n\
      \Store\n\
      \    name String\n\
      \PersonStore\n\
      \    personId PersonId\n\
      \    storeId StoreId\n\
      \    UniquePersonStore personId storeId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Person")))
                    (EntityNameDB (T.pack "person")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Store")))
                    (EntityNameDB (T.pack "store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "StoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "PersonStore")))
                    (EntityNameDB (T.pack "person_store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                     (ConstraintNameDB (T.pack "unique_person_store")))
                    ((FieldNameHS (T.pack "personId"), 
                      FieldNameDB (T.pack "person_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "storeId"), 
                           FieldNameDB (T.pack "store_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "personId")))
                (FieldNameDB (T.pack "person_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "PersonId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "storeId")))
                (FieldNameDB (T.pack "store_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "StoreId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(85,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Person")))
                       (EntityNameDB (T.pack "person")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Store")))
                       (EntityNameDB (T.pack "store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "StoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "PersonStore")))
                       (EntityNameDB (T.pack "person_store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                        (ConstraintNameDB (T.pack "unique_person_store")))
                       ((FieldNameHS (T.pack "personId"), 
                         FieldNameDB (T.pack "person_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "storeId"), 
                              FieldNameDB (T.pack "store_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "personId")))
                   (FieldNameDB (T.pack "person_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "PersonId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "storeId")))
                   (FieldNameDB (T.pack "store_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "StoreId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField Person where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Person where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Store where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Store where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField PersonStore where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["personId", "storeId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql PersonStore where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data Person = Person {personName :: !String}
    type PersonId = Database.Persist.Key Person
    instance PersistEntity Person where
      type PersistEntityBackend Person = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Person
      newtype Database.Persist.Key Person
        = PersonKey {unPersonKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Person typ
        = (typ ~ PersonId) => PersonId | (typ ~ String) => PersonName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Person")))
                     (EntityNameDB (T.pack "person")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_abpD) = [SomePersistField x_abpD]
      fromPersistValues [x1_abpF]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person")) (T.pack "name"))
                 . fromPersistValue)
                x1_abpF
      fromPersistValues x_abpE
        = (Left
             $ (mappend (T.pack "Person: fromPersistValues failed on: "))
                 (T.pack $ show x_abpE))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person _name_abpG) = []
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Person))
            (FieldNameHS (T.pack "name"))
      persistIdField = PersonId
      fieldLens PersonId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abpI) key_abpJ -> (Entity key_abpJ) value_abpI)
      fieldLens PersonName
        = (PTH.lensPTH ((\ Person {personName = x} -> x) . entityVal))
            (\ (Entity key_abpK value_abpL) x_abpM
               -> (Entity key_abpK)
                    (case value_abpL of Person {} -> Person {personName = x_abpM}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Person where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    data Store = Store {storeName :: !String}
    type StoreId = Database.Persist.Key Store
    instance PersistEntity Store where
      type PersistEntityBackend Store = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Store
      newtype Database.Persist.Key Store
        = StoreKey {unStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Store typ
        = (typ ~ StoreId) => StoreId | (typ ~ String) => StoreName
      keyToValues
        = ((: []) . (toPersistValue . (\ StoreKey {unStoreKey = x} -> x)))
      keyFromValues
        = (fmap StoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Store")))
                     (EntityNameDB (T.pack "store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "StoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "StoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Store x_abpN) = [SomePersistField x_abpN]
      fromPersistValues [x1_abpP]
        = Store
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "store")) (T.pack "name"))
                 . fromPersistValue)
                x1_abpP
      fromPersistValues x_abpO
        = (Left
             $ (mappend (T.pack "Store: fromPersistValues failed on: "))
                 (T.pack $ show x_abpO))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Store _name_abpQ) = []
      persistFieldDef StoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "StoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef StoreName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Store))
            (FieldNameHS (T.pack "name"))
      persistIdField = StoreId
      fieldLens StoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abpS) key_abpT -> (Entity key_abpT) value_abpS)
      fieldLens StoreName
        = (PTH.lensPTH ((\ Store {storeName = x} -> x) . entityVal))
            (\ (Entity key_abpU value_abpV) x_abpW
               -> (Entity key_abpU)
                    (case value_abpV of Store {} -> Store {storeName = x_abpW}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Store where
      toBackendKey = \ StoreKey {unStoreKey = x} -> x
      fromBackendKey = StoreKey
    data PersonStore
      = PersonStore {personStorePersonId :: !PersonId,
                     personStoreStoreId :: !StoreId}
    type PersonStoreId = Database.Persist.Key PersonStore
    instance PersistEntity PersonStore where
      type PersistEntityBackend PersonStore = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique PersonStore = UniquePersonStore PersonId StoreId
      newtype Database.Persist.Key PersonStore
        = PersonStoreKey {unPersonStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField PersonStore typ
        = (typ ~ PersonStoreId) => PersonStoreId |
          (typ ~ PersonId) => PersonStorePersonId |
          (typ ~ StoreId) => PersonStoreStoreId
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonStoreKey {unPersonStoreKey = x} -> x)))
      keyFromValues
        = (fmap PersonStoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "PersonStore")))
                     (EntityNameDB (T.pack "person_store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                      (ConstraintNameDB (T.pack "unique_person_store")))
                     ((FieldNameHS (T.pack "personId"), 
                       FieldNameDB (T.pack "person_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "storeId"), 
                            FieldNameDB (T.pack "store_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "personId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "person_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "PersonId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy PersonId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Person")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "storeId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "store_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "StoreId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy StoreId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Store")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonStoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonStore x_abpX x_abpY)
        = [SomePersistField x_abpX, SomePersistField x_abpY]
      fromPersistValues [x1_abq0, x2_abq1]
        = PersonStore
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "personId"))
                 . fromPersistValue)
                x1_abq0
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "storeId"))
                 . fromPersistValue)
                x2_abq1
      fromPersistValues x_abpZ
        = (Left
             $ (mappend (T.pack "PersonStore: fromPersistValues failed on: "))
                 (T.pack $ show x_abpZ))
      persistUniqueToFieldNames UniquePersonStore {}
        = ((FieldNameHS (T.pack "personId"), 
            FieldNameDB (T.pack "person_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "storeId"), 
                 FieldNameDB (T.pack "store_id"))])
      persistUniqueToValues (UniquePersonStore x_abq2 x_abq3)
        = [toPersistValue x_abq2, toPersistValue x_abq3]
      persistUniqueKeys (PersonStore _personId_abq4 _storeId_abq5)
        = [(UniquePersonStore _personId_abq4) _storeId_abq5]
      persistFieldDef PersonStoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonStorePersonId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "personId"))
      persistFieldDef PersonStoreStoreId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "storeId"))
      persistIdField = PersonStoreId
      fieldLens PersonStoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abq7) key_abq8 -> (Entity key_abq8) value_abq7)
      fieldLens PersonStorePersonId
        = (PTH.lensPTH
             ((\ PersonStore {personStorePersonId = x} -> x) . entityVal))
            (\ (Entity key_abq9 value_abqa) x_abqb
               -> (Entity key_abq9)
                    (case value_abqa of
                       PersonStore {personStoreStoreId = personStoreStoreId}
                         -> PersonStore
                              {personStorePersonId = x_abqb,
                               personStoreStoreId = personStoreStoreId}))
      fieldLens PersonStoreStoreId
        = (PTH.lensPTH
             ((\ PersonStore {personStoreStoreId = x} -> x) . entityVal))
            (\ (Entity key_abq9 value_abqa) x_abqb
               -> (Entity key_abq9)
                    (case value_abqa of
                       PersonStore {personStorePersonId = personStorePersonId}
                         -> PersonStore
                              {personStorePersonId = personStorePersonId,
                               personStoreStoreId = x_abqb}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend PersonStore where
      toBackendKey = \ PersonStoreKey {unPersonStoreKey = x} -> x
      fromBackendKey = PersonStoreKey
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Person) =>
             OnlyOneUniqueKey Person where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Person) =>
             AtLeastOneUniqueKey Person where
      requireUniquesP _ = error "impossible"
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Store) =>
             OnlyOneUniqueKey Store where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Store) =>
             AtLeastOneUniqueKey Store where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey PersonStore where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey PersonStore where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" Person (Database.Persist.Key Person) where
      symbolToField = PersonId
    instance SymbolToField "name" Person String where
      symbolToField = PersonName
    instance SymbolToField "id" Store (Database.Persist.Key Store) where
      symbolToField = StoreId
    instance SymbolToField "name" Store String where
      symbolToField = StoreName
    instance SymbolToField "id" PersonStore (Database.Persist.Key PersonStore) where
      symbolToField = PersonStoreId
    instance SymbolToField "personId" PersonStore PersonId where
      symbolToField = PersonStorePersonId
    instance SymbolToField "storeId" PersonStore StoreId where
      symbolToField = PersonStoreStoreId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Person),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Store),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(85,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \Person\n\
      \    name String\n\
      \Store\n\
      \    name String\n\
      \PersonStore\n\
      \    personId PersonId\n\
      \    storeId StoreId\n\
      \    UniquePersonStore personId storeId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Person")))
                    (EntityNameDB (T.pack "person")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Store")))
                    (EntityNameDB (T.pack "store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "StoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "PersonStore")))
                    (EntityNameDB (T.pack "person_store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                     (ConstraintNameDB (T.pack "unique_person_store")))
                    ((FieldNameHS (T.pack "personId"), 
                      FieldNameDB (T.pack "person_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "storeId"), 
                           FieldNameDB (T.pack "store_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "personId")))
                (FieldNameDB (T.pack "person_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "PersonId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "storeId")))
                (FieldNameDB (T.pack "store_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "StoreId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(85,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Person")))
                       (EntityNameDB (T.pack "person")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Store")))
                       (EntityNameDB (T.pack "store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "StoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "PersonStore")))
                       (EntityNameDB (T.pack "person_store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                        (ConstraintNameDB (T.pack "unique_person_store")))
                       ((FieldNameHS (T.pack "personId"), 
                         FieldNameDB (T.pack "person_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "storeId"), 
                              FieldNameDB (T.pack "store_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "personId")))
                   (FieldNameDB (T.pack "person_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "PersonId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "storeId")))
                   (FieldNameDB (T.pack "store_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "StoreId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField Person where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Person where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Store where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Store where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField PersonStore where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["personId", "storeId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql PersonStore where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data Person = Person {personName :: !String}
    type PersonId = Database.Persist.Key Person
    instance PersistEntity Person where
      type PersistEntityBackend Person = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Person
      newtype Database.Persist.Key Person
        = PersonKey {unPersonKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Person typ
        = (typ ~ PersonId) => PersonId | (typ ~ String) => PersonName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Person")))
                     (EntityNameDB (T.pack "person")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_abEW) = [SomePersistField x_abEW]
      fromPersistValues [x1_abEY]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person")) (T.pack "name"))
                 . fromPersistValue)
                x1_abEY
      fromPersistValues x_abEX
        = (Left
             $ (mappend (T.pack "Person: fromPersistValues failed on: "))
                 (T.pack $ show x_abEX))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person _name_abEZ) = []
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Person))
            (FieldNameHS (T.pack "name"))
      persistIdField = PersonId
      fieldLens PersonId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abF1) key_abF2 -> (Entity key_abF2) value_abF1)
      fieldLens PersonName
        = (PTH.lensPTH ((\ Person {personName = x} -> x) . entityVal))
            (\ (Entity key_abF3 value_abF4) x_abF5
               -> (Entity key_abF3)
                    (case value_abF4 of Person {} -> Person {personName = x_abF5}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Person where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    data Store = Store {storeName :: !String}
    type StoreId = Database.Persist.Key Store
    instance PersistEntity Store where
      type PersistEntityBackend Store = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Store
      newtype Database.Persist.Key Store
        = StoreKey {unStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Store typ
        = (typ ~ StoreId) => StoreId | (typ ~ String) => StoreName
      keyToValues
        = ((: []) . (toPersistValue . (\ StoreKey {unStoreKey = x} -> x)))
      keyFromValues
        = (fmap StoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Store")))
                     (EntityNameDB (T.pack "store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "StoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "StoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Store x_abF6) = [SomePersistField x_abF6]
      fromPersistValues [x1_abF8]
        = Store
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "store")) (T.pack "name"))
                 . fromPersistValue)
                x1_abF8
      fromPersistValues x_abF7
        = (Left
             $ (mappend (T.pack "Store: fromPersistValues failed on: "))
                 (T.pack $ show x_abF7))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Store _name_abF9) = []
      persistFieldDef StoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "StoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef StoreName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Store))
            (FieldNameHS (T.pack "name"))
      persistIdField = StoreId
      fieldLens StoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abFb) key_abFc -> (Entity key_abFc) value_abFb)
      fieldLens StoreName
        = (PTH.lensPTH ((\ Store {storeName = x} -> x) . entityVal))
            (\ (Entity key_abFd value_abFe) x_abFf
               -> (Entity key_abFd)
                    (case value_abFe of Store {} -> Store {storeName = x_abFf}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Store where
      toBackendKey = \ StoreKey {unStoreKey = x} -> x
      fromBackendKey = StoreKey
    data PersonStore
      = PersonStore {personStorePersonId :: !PersonId,
                     personStoreStoreId :: !StoreId}
    type PersonStoreId = Database.Persist.Key PersonStore
    instance PersistEntity PersonStore where
      type PersistEntityBackend PersonStore = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique PersonStore = UniquePersonStore PersonId StoreId
      newtype Database.Persist.Key PersonStore
        = PersonStoreKey {unPersonStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField PersonStore typ
        = (typ ~ PersonStoreId) => PersonStoreId |
          (typ ~ PersonId) => PersonStorePersonId |
          (typ ~ StoreId) => PersonStoreStoreId
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonStoreKey {unPersonStoreKey = x} -> x)))
      keyFromValues
        = (fmap PersonStoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "PersonStore")))
                     (EntityNameDB (T.pack "person_store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                      (ConstraintNameDB (T.pack "unique_person_store")))
                     ((FieldNameHS (T.pack "personId"), 
                       FieldNameDB (T.pack "person_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "storeId"), 
                            FieldNameDB (T.pack "store_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "personId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "person_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "PersonId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy PersonId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Person")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "storeId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "store_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "StoreId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy StoreId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Store")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonStoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonStore x_abFg x_abFh)
        = [SomePersistField x_abFg, SomePersistField x_abFh]
      fromPersistValues [x1_abFj, x2_abFk]
        = PersonStore
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "personId"))
                 . fromPersistValue)
                x1_abFj
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "storeId"))
                 . fromPersistValue)
                x2_abFk
      fromPersistValues x_abFi
        = (Left
             $ (mappend (T.pack "PersonStore: fromPersistValues failed on: "))
                 (T.pack $ show x_abFi))
      persistUniqueToFieldNames UniquePersonStore {}
        = ((FieldNameHS (T.pack "personId"), 
            FieldNameDB (T.pack "person_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "storeId"), 
                 FieldNameDB (T.pack "store_id"))])
      persistUniqueToValues (UniquePersonStore x_abFl x_abFm)
        = [toPersistValue x_abFl, toPersistValue x_abFm]
      persistUniqueKeys (PersonStore _personId_abFn _storeId_abFo)
        = [(UniquePersonStore _personId_abFn) _storeId_abFo]
      persistFieldDef PersonStoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonStorePersonId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "personId"))
      persistFieldDef PersonStoreStoreId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "storeId"))
      persistIdField = PersonStoreId
      fieldLens PersonStoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_abFq) key_abFr -> (Entity key_abFr) value_abFq)
      fieldLens PersonStorePersonId
        = (PTH.lensPTH
             ((\ PersonStore {personStorePersonId = x} -> x) . entityVal))
            (\ (Entity key_abFs value_abFt) x_abFu
               -> (Entity key_abFs)
                    (case value_abFt of
                       PersonStore {personStoreStoreId = personStoreStoreId}
                         -> PersonStore
                              {personStorePersonId = x_abFu,
                               personStoreStoreId = personStoreStoreId}))
      fieldLens PersonStoreStoreId
        = (PTH.lensPTH
             ((\ PersonStore {personStoreStoreId = x} -> x) . entityVal))
            (\ (Entity key_abFs value_abFt) x_abFu
               -> (Entity key_abFs)
                    (case value_abFt of
                       PersonStore {personStorePersonId = personStorePersonId}
                         -> PersonStore
                              {personStorePersonId = personStorePersonId,
                               personStoreStoreId = x_abFu}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend PersonStore where
      toBackendKey = \ PersonStoreKey {unPersonStoreKey = x} -> x
      fromBackendKey = PersonStoreKey
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Person) =>
             OnlyOneUniqueKey Person where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Person) =>
             AtLeastOneUniqueKey Person where
      requireUniquesP _ = error "impossible"
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Store) =>
             OnlyOneUniqueKey Store where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Store) =>
             AtLeastOneUniqueKey Store where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey PersonStore where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey PersonStore where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" Person (Database.Persist.Key Person) where
      symbolToField = PersonId
    instance SymbolToField "name" Person String where
      symbolToField = PersonName
    instance SymbolToField "id" Store (Database.Persist.Key Store) where
      symbolToField = StoreId
    instance SymbolToField "name" Store String where
      symbolToField = StoreName
    instance SymbolToField "id" PersonStore (Database.Persist.Key PersonStore) where
      symbolToField = PersonStoreId
    instance SymbolToField "personId" PersonStore PersonId where
      symbolToField = PersonStorePersonId
    instance SymbolToField "storeId" PersonStore StoreId where
      symbolToField = PersonStoreStoreId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Person),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Store),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(85,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \Person\n\
      \    name String\n\
      \Store\n\
      \    name String\n\
      \PersonStore\n\
      \    personId PersonId\n\
      \    storeId StoreId\n\
      \    UniquePersonStore personId storeId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Person")))
                    (EntityNameDB (T.pack "person")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Store")))
                    (EntityNameDB (T.pack "store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "StoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "name")))
                (FieldNameDB (T.pack "name")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "String")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "PersonStore")))
                    (EntityNameDB (T.pack "person_store")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                     (ConstraintNameDB (T.pack "unique_person_store")))
                    ((FieldNameHS (T.pack "personId"), 
                      FieldNameDB (T.pack "person_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "storeId"), 
                           FieldNameDB (T.pack "store_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "personId")))
                (FieldNameDB (T.pack "person_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "PersonId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "storeId")))
                (FieldNameDB (T.pack "store_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "StoreId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(85,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Person")))
                       (EntityNameDB (T.pack "person")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Store")))
                       (EntityNameDB (T.pack "store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "StoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "name")))
                   (FieldNameDB (T.pack "name")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "String")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "PersonStore")))
                       (EntityNameDB (T.pack "person_store")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                        (ConstraintNameDB (T.pack "unique_person_store")))
                       ((FieldNameHS (T.pack "personId"), 
                         FieldNameDB (T.pack "person_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "storeId"), 
                              FieldNameDB (T.pack "store_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "personId")))
                   (FieldNameDB (T.pack "person_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "PersonId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "storeId")))
                   (FieldNameDB (T.pack "store_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "StoreId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField Person where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Person where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Store where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["name"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Store where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField PersonStore where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["personId", "storeId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql PersonStore where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data Person = Person {personName :: !String}
    type PersonId = Database.Persist.Key Person
    instance PersistEntity Person where
      type PersistEntityBackend Person = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Person
      newtype Database.Persist.Key Person
        = PersonKey {unPersonKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Person typ
        = (typ ~ PersonId) => PersonId | (typ ~ String) => PersonName
      keyToValues
        = ((: [])
             . (toPersistValue . (\ PersonKey {unPersonKey = x} -> x)))
      keyFromValues
        = (fmap PersonKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Person")))
                     (EntityNameDB (T.pack "person")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Person x_acEr) = [SomePersistField x_acEr]
      fromPersistValues [x1_acEt]
        = Person
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person")) (T.pack "name"))
                 . fromPersistValue)
                x1_acEt
      fromPersistValues x_acEs
        = (Left
             $ (mappend (T.pack "Person: fromPersistValues failed on: "))
                 (T.pack $ show x_acEs))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Person _name_acEu) = []
      persistFieldDef PersonId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Person))
            (FieldNameHS (T.pack "name"))
      persistIdField = PersonId
      fieldLens PersonId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_acEw) key_acEx -> (Entity key_acEx) value_acEw)
      fieldLens PersonName
        = (PTH.lensPTH ((\ Person {personName = x} -> x) . entityVal))
            (\ (Entity key_acEy value_acEz) x_acEA
               -> (Entity key_acEy)
                    (case value_acEz of Person {} -> Person {personName = x_acEA}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Person where
      toBackendKey = \ PersonKey {unPersonKey = x} -> x
      fromBackendKey = PersonKey
    data Store = Store {storeName :: !String}
    type StoreId = Database.Persist.Key Store
    instance PersistEntity Store where
      type PersistEntityBackend Store = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Store
      newtype Database.Persist.Key Store
        = StoreKey {unStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Store typ
        = (typ ~ StoreId) => StoreId | (typ ~ String) => StoreName
      keyToValues
        = ((: []) . (toPersistValue . (\ StoreKey {unStoreKey = x} -> x)))
      keyFromValues
        = (fmap StoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Store")))
                     (EntityNameDB (T.pack "store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "StoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "name"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "name"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "String"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy String),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "StoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Store x_acEB) = [SomePersistField x_acEB]
      fromPersistValues [x1_acED]
        = Store
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "store")) (T.pack "name"))
                 . fromPersistValue)
                x1_acED
      fromPersistValues x_acEC
        = (Left
             $ (mappend (T.pack "Store: fromPersistValues failed on: "))
                 (T.pack $ show x_acEC))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Store _name_acEE) = []
      persistFieldDef StoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "StoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef StoreName
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Store))
            (FieldNameHS (T.pack "name"))
      persistIdField = StoreId
      fieldLens StoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_acEG) key_acEH -> (Entity key_acEH) value_acEG)
      fieldLens StoreName
        = (PTH.lensPTH ((\ Store {storeName = x} -> x) . entityVal))
            (\ (Entity key_acEI value_acEJ) x_acEK
               -> (Entity key_acEI)
                    (case value_acEJ of Store {} -> Store {storeName = x_acEK}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Store where
      toBackendKey = \ StoreKey {unStoreKey = x} -> x
      fromBackendKey = StoreKey
    data PersonStore
      = PersonStore {personStorePersonId :: !PersonId,
                     personStoreStoreId :: !StoreId}
    type PersonStoreId = Database.Persist.Key PersonStore
    instance PersistEntity PersonStore where
      type PersistEntityBackend PersonStore = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique PersonStore = UniquePersonStore PersonId StoreId
      newtype Database.Persist.Key PersonStore
        = PersonStoreKey {unPersonStoreKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField PersonStore typ
        = (typ ~ PersonStoreId) => PersonStoreId |
          (typ ~ PersonId) => PersonStorePersonId |
          (typ ~ StoreId) => PersonStoreStoreId
      keyToValues
        = ((: [])
             . (toPersistValue
                  . (\ PersonStoreKey {unPersonStoreKey = x} -> x)))
      keyFromValues
        = (fmap PersonStoreKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "PersonStore")))
                     (EntityNameDB (T.pack "person_store")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniquePersonStore")))
                      (ConstraintNameDB (T.pack "unique_person_store")))
                     ((FieldNameHS (T.pack "personId"), 
                       FieldNameDB (T.pack "person_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "storeId"), 
                            FieldNameDB (T.pack "store_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "personId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "person_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "PersonId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy PersonId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Person")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "storeId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "store_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "StoreId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy StoreId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Store")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "PersonStoreId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (PersonStore x_acEL x_acEM)
        = [SomePersistField x_acEL, SomePersistField x_acEM]
      fromPersistValues [x1_acEO, x2_acEP]
        = PersonStore
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "personId"))
                 . fromPersistValue)
                x1_acEO
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "person_store")) (T.pack "storeId"))
                 . fromPersistValue)
                x2_acEP
      fromPersistValues x_acEN
        = (Left
             $ (mappend (T.pack "PersonStore: fromPersistValues failed on: "))
                 (T.pack $ show x_acEN))
      persistUniqueToFieldNames UniquePersonStore {}
        = ((FieldNameHS (T.pack "personId"), 
            FieldNameDB (T.pack "person_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "storeId"), 
                 FieldNameDB (T.pack "store_id"))])
      persistUniqueToValues (UniquePersonStore x_acEQ x_acER)
        = [toPersistValue x_acEQ, toPersistValue x_acER]
      persistUniqueKeys (PersonStore _personId_acES _storeId_acET)
        = [(UniquePersonStore _personId_acES) _storeId_acET]
      persistFieldDef PersonStoreId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "PersonStoreId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef PersonStorePersonId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "personId"))
      persistFieldDef PersonStoreStoreId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore))
            (FieldNameHS (T.pack "storeId"))
      persistIdField = PersonStoreId
      fieldLens PersonStoreId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_acEV) key_acEW -> (Entity key_acEW) value_acEV)
      fieldLens PersonStorePersonId
        = (PTH.lensPTH
             ((\ PersonStore {personStorePersonId = x} -> x) . entityVal))
            (\ (Entity key_acEX value_acEY) x_acEZ
               -> (Entity key_acEX)
                    (case value_acEY of
                       PersonStore {personStoreStoreId = personStoreStoreId}
                         -> PersonStore
                              {personStorePersonId = x_acEZ,
                               personStoreStoreId = personStoreStoreId}))
      fieldLens PersonStoreStoreId
        = (PTH.lensPTH
             ((\ PersonStore {personStoreStoreId = x} -> x) . entityVal))
            (\ (Entity key_acEX value_acEY) x_acEZ
               -> (Entity key_acEX)
                    (case value_acEY of
                       PersonStore {personStorePersonId = personStorePersonId}
                         -> PersonStore
                              {personStorePersonId = personStorePersonId,
                               personStoreStoreId = x_acEZ}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend PersonStore where
      toBackendKey = \ PersonStoreKey {unPersonStoreKey = x} -> x
      fromBackendKey = PersonStoreKey
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Person) =>
             OnlyOneUniqueKey Person where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Person) =>
             AtLeastOneUniqueKey Person where
      requireUniquesP _ = error "impossible"
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Store) =>
             OnlyOneUniqueKey Store where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Store) =>
             AtLeastOneUniqueKey Store where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey PersonStore where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey PersonStore where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" Person (Database.Persist.Key Person) where
      symbolToField = PersonId
    instance SymbolToField "name" Person String where
      symbolToField = PersonName
    instance SymbolToField "id" Store (Database.Persist.Key Store) where
      symbolToField = StoreId
    instance SymbolToField "name" Store String where
      symbolToField = StoreName
    instance SymbolToField "id" PersonStore (Database.Persist.Key PersonStore) where
      symbolToField = PersonStoreId
    instance SymbolToField "personId" PersonStore PersonId where
      symbolToField = PersonStorePersonId
    instance SymbolToField "storeId" PersonStore StoreId where
      symbolToField = PersonStoreStoreId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Person),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Store),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy PersonStore)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,93)-(88,2): Splicing expression
    Language.Haskell.TH.Quote.quoteExp
      PTH.persistLowerCase
      "\n\
      \News sql = news\n\
      \  title T.Text\n\
      \  UniqueNews title\n\
      \  images\n\
      \Image sql = images\n\
      \  header T.Text\n\
      \  base64 T.Text\n\
      \ImageBank sql images_bank\n\
      \  newsId NewsId\n\
      \  imageId ImageId\n\
      \  UniqueImageBank newsId imageId\n\
      \\n\
      \  -- User sql = users\n\
      \  --   login T.Text\n\
      \  --   name T.Text\n\
      \  --   password T.Text\n\
      \  --   isAdmin Bool\n\
      \  --   isPublisher Bool\n\
      \  --   categoryId CategoryId\n\
      \  --   UniqueLabel name\n\
      \  --   Primary login\n\
      \  --   deriving Eq Show\n\
      \  -- Category sql = categories\n\
      \  --   label T.Text\n\
      \  --   UniqueCategory label\n\
      \  --   deriving Eq Show\n\
      \  -- ProductCategory\n\
      \  --   productId ProductId\n\
      \  --   categoryId CategoryId\n\
      \  --   Primary productId categoryId\n\
      \  --   deriving Eq Show\n\
      \  -- Warehouse\n\
      \  --   productId ProductId\n\
      \  --   quantity Int\n\
      \  --   -- created UTCTime default=CURRENT_TIME\n\
      \  --   -- modified UTCTime default=CURRENT_TIME\n\
      \  --   deriving Eq Show\n"
  ======>
    [(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "News")))
                    (EntityNameDB (T.pack "news")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "NewsId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "news"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                     (ConstraintNameDB (T.pack "unique_news")))
                    ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                       GHC.Base.:| []))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "title")))
                (FieldNameDB (T.pack "title")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "Image")))
                    (EntityNameDB (T.pack "image")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "=", T.pack "images"])
                 [])
                [])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "header")))
                (FieldNameDB (T.pack "header")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "base64")))
                (FieldNameDB (T.pack "base64")))
               [])
              True)
             ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing],
     (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
         (Database.Persist.Quasi.Internal.DefaultKey
            (FieldNameDB (T.pack "id"))))
        (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                     (EntityNameHS (T.pack "ImageBank")))
                    (EntityNameDB (T.pack "image_bank")))
                   (EntityIdField
                      (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                  (FieldNameDB (T.pack "id")))
                                 ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                SqlInt64)
                               [])
                              True)
                             NoReference)
                            ((FieldCascade Nothing) Nothing))
                           Nothing)
                          Nothing)
                         True)))
                  [T.pack "sql", T.pack "images_bank"])
                 [])
                [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                     (ConstraintNameDB (T.pack "unique_image_bank")))
                    ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                       GHC.Base.:|
                         [(FieldNameHS (T.pack "imageId"), 
                           FieldNameDB (T.pack "image_id"))]))
                   []])
               [])
              [])
             Data.Map.Internal.Tip)
            False)
           Nothing))
       [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "newsId")))
                (FieldNameDB (T.pack "news_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "NewsId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing,
        (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                 (FieldNameHS (T.pack "imageId")))
                (FieldNameDB (T.pack "image_id")))
               [])
              True)
             ((FTTypeCon Nothing) (T.pack "ImageId")))
            ((FieldCascade Nothing) Nothing))
           Nothing)
          Nothing]]
/home/h/projects/webServer/src/Base/BasicSchema.hs:(50,1)-(88,2): Splicing declarations
    PTH.share
      [PTH.mkPersist PTH.sqlSettings, PTH.mkMigrate "migrateAll"]
      ([(((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "News")))
                       (EntityNameDB (T.pack "news")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "NewsId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "news"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                        (ConstraintNameDB (T.pack "unique_news")))
                       ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                          GHC.Base.:| []))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "title")))
                   (FieldNameDB (T.pack "title")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "Image")))
                       (EntityNameDB (T.pack "image")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "=", T.pack "images"])
                    [])
                   [])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "header")))
                   (FieldNameDB (T.pack "header")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "base64")))
                   (FieldNameDB (T.pack "base64")))
                  [])
                 True)
                ((FTTypeCon (Just (T.pack "T"))) (T.pack "Text")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing],
        (((Database.Persist.Quasi.Internal.UnboundEntityDef [])
            (Database.Persist.Quasi.Internal.DefaultKey
               (FieldNameDB (T.pack "id"))))
           (((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                        (EntityNameHS (T.pack "ImageBank")))
                       (EntityNameDB (T.pack "image_bank")))
                      (EntityIdField
                         (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                     (FieldNameDB (T.pack "id")))
                                    ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                   SqlInt64)
                                  [])
                                 True)
                                NoReference)
                               ((FieldCascade Nothing) Nothing))
                              Nothing)
                             Nothing)
                            True)))
                     [T.pack "sql", T.pack "images_bank"])
                    [])
                   [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                        (ConstraintNameDB (T.pack "unique_image_bank")))
                       ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                          GHC.Base.:|
                            [(FieldNameHS (T.pack "imageId"), 
                              FieldNameDB (T.pack "image_id"))]))
                      []])
                  [])
                 [])
                Data.Map.Internal.Tip)
               False)
              Nothing))
          [(((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "newsId")))
                   (FieldNameDB (T.pack "news_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "NewsId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing,
           (((((((Database.Persist.Quasi.Internal.UnboundFieldDef
                    (FieldNameHS (T.pack "imageId")))
                   (FieldNameDB (T.pack "image_id")))
                  [])
                 True)
                ((FTTypeCon Nothing) (T.pack "ImageId")))
               ((FieldCascade Nothing) Nothing))
              Nothing)
             Nothing]])
  ======>
    instance PersistField News where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper ["title"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql News where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField Image where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["header", "base64"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql Image where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    instance PersistField ImageBank where
      toPersistValue = Database.Persist.TH.entityToPersistValueHelper
      fromPersistValue
        = Database.Persist.TH.entityFromPersistValueHelper
            ["newsId", "imageId"]
    instance persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql ImageBank where
      persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
        _
        = SqlString
    data News = News {newsTitle :: !T.Text}
    type NewsId = Database.Persist.Key News
    instance PersistEntity News where
      type PersistEntityBackend News = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique News = UniqueNews T.Text
      newtype Database.Persist.Key News
        = NewsKey {unNewsKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField News typ
        = (typ ~ NewsId) => NewsId | (typ ~ T.Text) => NewsTitle
      keyToValues
        = ((: []) . (toPersistValue . (\ NewsKey {unNewsKey = x} -> x)))
      keyFromValues
        = (fmap NewsKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "News")))
                     (EntityNameDB (T.pack "news")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "NewsId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "news"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueNews")))
                      (ConstraintNameDB (T.pack "unique_news")))
                     ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
                        GHC.Base.:| []))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "title"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "title"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "NewsId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (News x_ak3l) = [SomePersistField x_ak3l]
      fromPersistValues [x1_ak3n]
        = News
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "news")) (T.pack "title"))
                 . fromPersistValue)
                x1_ak3n
      fromPersistValues x_ak3m
        = (Left
             $ (mappend (T.pack "News: fromPersistValues failed on: "))
                 (T.pack $ show x_ak3m))
      persistUniqueToFieldNames UniqueNews {}
        = ((FieldNameHS (T.pack "title"), FieldNameDB (T.pack "title"))
             GHC.Base.:| [])
      persistUniqueToValues (UniqueNews x_ak3o) = [toPersistValue x_ak3o]
      persistUniqueKeys (News _title_ak3p) = [UniqueNews _title_ak3p]
      persistFieldDef NewsId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "NewsId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef NewsTitle
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy News))
            (FieldNameHS (T.pack "title"))
      persistIdField = NewsId
      fieldLens NewsId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ak3r) key_ak3s -> (Entity key_ak3s) value_ak3r)
      fieldLens NewsTitle
        = (PTH.lensPTH ((\ News {newsTitle = x} -> x) . entityVal))
            (\ (Entity key_ak3t value_ak3u) x_ak3v
               -> (Entity key_ak3t)
                    (case value_ak3u of News {} -> News {newsTitle = x_ak3v}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend News where
      toBackendKey = \ NewsKey {unNewsKey = x} -> x
      fromBackendKey = NewsKey
    data Image = Image {imageHeader :: !T.Text, imageBase64 :: !T.Text}
    type ImageId = Database.Persist.Key Image
    instance PersistEntity Image where
      type PersistEntityBackend Image = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique Image
      newtype Database.Persist.Key Image
        = ImageKey {unImageKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField Image typ
        = (typ ~ ImageId) => ImageId |
          (typ ~ T.Text) => ImageHeader |
          (typ ~ T.Text) => ImageBase64
      keyToValues
        = ((: []) . (toPersistValue . (\ ImageKey {unImageKey = x} -> x)))
      keyFromValues
        = (fmap ImageKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "Image")))
                     (EntityNameDB (T.pack "image")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "=", T.pack "images"])
                  [])
                 [])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "header"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "header"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "base64"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "base64"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      (Just
                                                                                                                         (T.pack
                                                                                                                            "T")))
                                                                                                                     (T.pack
                                                                                                                        "Text"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy T.Text),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = NoReference,
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (Image x_ak3w x_ak3x)
        = [SomePersistField x_ak3w, SomePersistField x_ak3x]
      fromPersistValues [x1_ak3z, x2_ak3A]
        = Image
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "header"))
                 . fromPersistValue)
                x1_ak3z
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image")) (T.pack "base64"))
                 . fromPersistValue)
                x2_ak3A
      fromPersistValues x_ak3y
        = (Left
             $ (mappend (T.pack "Image: fromPersistValues failed on: "))
                 (T.pack $ show x_ak3y))
      persistUniqueToFieldNames _
        = error "Degenerate case, should never happen"
      persistUniqueToValues _
        = error "Degenerate case, should never happen"
      persistUniqueKeys (Image _header_ak3B _base64_ak3C) = []
      persistFieldDef ImageId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageHeader
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "header"))
      persistFieldDef ImageBase64
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy Image))
            (FieldNameHS (T.pack "base64"))
      persistIdField = ImageId
      fieldLens ImageId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ak3E) key_ak3F -> (Entity key_ak3F) value_ak3E)
      fieldLens ImageHeader
        = (PTH.lensPTH ((\ Image {imageHeader = x} -> x) . entityVal))
            (\ (Entity key_ak3G value_ak3H) x_ak3I
               -> (Entity key_ak3G)
                    (case value_ak3H of
                       Image {imageBase64 = imageBase64}
                         -> Image {imageHeader = x_ak3I, imageBase64 = imageBase64}))
      fieldLens ImageBase64
        = (PTH.lensPTH ((\ Image {imageBase64 = x} -> x) . entityVal))
            (\ (Entity key_ak3G value_ak3H) x_ak3I
               -> (Entity key_ak3G)
                    (case value_ak3H of
                       Image {imageHeader = imageHeader}
                         -> Image {imageHeader = imageHeader, imageBase64 = x_ak3I}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend Image where
      toBackendKey = \ ImageKey {unImageKey = x} -> x
      fromBackendKey = ImageKey
    data ImageBank
      = ImageBank {imageBankNewsId :: !NewsId,
                   imageBankImageId :: !ImageId}
    type ImageBankId = Database.Persist.Key ImageBank
    instance PersistEntity ImageBank where
      type PersistEntityBackend ImageBank = Database.Persist.SqlBackend.Internal.SqlBackend
      data Unique ImageBank = UniqueImageBank NewsId ImageId
      newtype Database.Persist.Key ImageBank
        = ImageBankKey {unImageBankKey :: (BackendKey Database.Persist.SqlBackend.Internal.SqlBackend)}
        deriving stock Show
        deriving stock Read
        deriving newtype Eq
        deriving newtype Ord
        deriving newtype path-pieces-0.2.1-E15XfVOwfTfIr2VliI4YGA:Web.PathPieces.PathPiece
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.ToHttpApiData
        deriving newtype http-api-data-0.4.3-8AwfdtQImWAISYRgwZNRi0:Web.Internal.HttpApiData.FromHttpApiData
        deriving newtype PersistField
        deriving newtype persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.PersistFieldSql
        deriving newtype ToJSON
        deriving newtype FromJSON
      data EntityField ImageBank typ
        = (typ ~ ImageBankId) => ImageBankId |
          (typ ~ NewsId) => ImageBankNewsId |
          (typ ~ ImageId) => ImageBankImageId
      keyToValues
        = ((: [])
             . (toPersistValue . (\ ImageBankKey {unImageBankKey = x} -> x)))
      keyFromValues
        = (fmap ImageBankKey
             . (fromPersistValue . Database.Persist.TH.headNote))
      keyFromRecordM = Nothing
      entityDef _
        = ((((((((((persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.EntityDef
                      (EntityNameHS (T.pack "ImageBank")))
                     (EntityNameDB (T.pack "image_bank")))
                    (EntityIdField
                       (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                                   (FieldNameDB (T.pack "id")))
                                  ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                                 SqlInt64)
                                [])
                               True)
                              NoReference)
                             ((FieldCascade Nothing) Nothing))
                            Nothing)
                           Nothing)
                          True)))
                   [T.pack "sql", T.pack "images_bank"])
                  [])
                 [(((UniqueDef (ConstraintNameHS (T.pack "UniqueImageBank")))
                      (ConstraintNameDB (T.pack "unique_image_bank")))
                     ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
                        GHC.Base.:|
                          [(FieldNameHS (T.pack "imageId"), 
                            FieldNameDB (T.pack "image_id"))]))
                    []])
                [])
               [])
              Data.Map.Internal.Tip)
             False)
            Nothing
            {persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityFields = [FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "newsId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "news_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "NewsId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy NewsId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "News")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False},
                                                                                                    FieldDef
                                                                                                      {fieldHaskell = FieldNameHS
                                                                                                                        (T.pack
                                                                                                                           "imageId"),
                                                                                                       fieldDB = FieldNameDB
                                                                                                                   (T.pack
                                                                                                                      "image_id"),
                                                                                                       fieldType = (FTTypeCon
                                                                                                                      Nothing)
                                                                                                                     (T.pack
                                                                                                                        "ImageId"),
                                                                                                       fieldSqlType = persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Sql.Class.sqlType
                                                                                                                        (Data.Proxy.Proxy ::
                                                                                                                           Data.Proxy.Proxy ImageId),
                                                                                                       fieldAttrs = [],
                                                                                                       fieldStrict = True,
                                                                                                       fieldReference = ForeignRef
                                                                                                                          (EntityNameHS
                                                                                                                             (T.pack
                                                                                                                                "Image")),
                                                                                                       fieldCascade = (FieldCascade
                                                                                                                         Nothing)
                                                                                                                        Nothing,
                                                                                                       fieldComments = Nothing,
                                                                                                       fieldGenerated = Nothing,
                                                                                                       fieldIsImplicitIdColumn = False}],
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityId = EntityIdField
                                                                                                 (((((((((((FieldDef
                                                                                                              (FieldNameHS
                                                                                                                 (T.pack
                                                                                                                    "Id")))
                                                                                                             (FieldNameDB
                                                                                                                (T.pack
                                                                                                                   "id")))
                                                                                                            ((FTTypeCon
                                                                                                                Nothing)
                                                                                                               (T.pack
                                                                                                                  "ImageBankId")))
                                                                                                           SqlInt64)
                                                                                                          [])
                                                                                                         True)
                                                                                                        NoReference)
                                                                                                       ((FieldCascade
                                                                                                           Nothing)
                                                                                                          Nothing))
                                                                                                      Nothing)
                                                                                                     Nothing)
                                                                                                    True),
             persistent-2.13.3.5-2RpXYPsly8d7lfymAx4ys3:Database.Persist.Types.Base.entityForeigns = []}
      toPersistFields (ImageBank x_ak3J x_ak3K)
        = [SomePersistField x_ak3J, SomePersistField x_ak3K]
      fromPersistValues [x1_ak3M, x2_ak3N]
        = ImageBank
            <$>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "newsId"))
                 . fromPersistValue)
                x1_ak3M
            <*>
              (Database.Persist.TH.mapLeft
                 ((PTH.fieldError (T.pack "image_bank")) (T.pack "imageId"))
                 . fromPersistValue)
                x2_ak3N
      fromPersistValues x_ak3L
        = (Left
             $ (mappend (T.pack "ImageBank: fromPersistValues failed on: "))
                 (T.pack $ show x_ak3L))
      persistUniqueToFieldNames UniqueImageBank {}
        = ((FieldNameHS (T.pack "newsId"), FieldNameDB (T.pack "news_id"))
             GHC.Base.:|
               [(FieldNameHS (T.pack "imageId"), 
                 FieldNameDB (T.pack "image_id"))])
      persistUniqueToValues (UniqueImageBank x_ak3O x_ak3P)
        = [toPersistValue x_ak3O, toPersistValue x_ak3P]
      persistUniqueKeys (ImageBank _newsId_ak3Q _imageId_ak3R)
        = [(UniqueImageBank _newsId_ak3Q) _imageId_ak3R]
      persistFieldDef ImageBankId
        = Database.Persist.TH.stripIdFieldImpl
            (EntityIdField
               (((((((((((FieldDef (FieldNameHS (T.pack "Id")))
                           (FieldNameDB (T.pack "id")))
                          ((FTTypeCon Nothing) (T.pack "ImageBankId")))
                         SqlInt64)
                        [])
                       True)
                      NoReference)
                     ((FieldCascade Nothing) Nothing))
                    Nothing)
                   Nothing)
                  True))
      persistFieldDef ImageBankNewsId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "newsId"))
      persistFieldDef ImageBankImageId
        = (Database.Persist.TH.lookupEntityField
             (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank))
            (FieldNameHS (T.pack "imageId"))
      persistIdField = ImageBankId
      fieldLens ImageBankId
        = (PTH.lensPTH entityKey)
            (\ (Entity _ value_ak3T) key_ak3U -> (Entity key_ak3U) value_ak3T)
      fieldLens ImageBankNewsId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankNewsId = x} -> x) . entityVal))
            (\ (Entity key_ak3V value_ak3W) x_ak3X
               -> (Entity key_ak3V)
                    (case value_ak3W of
                       ImageBank {imageBankImageId = imageBankImageId}
                         -> ImageBank
                              {imageBankNewsId = x_ak3X, imageBankImageId = imageBankImageId}))
      fieldLens ImageBankImageId
        = (PTH.lensPTH
             ((\ ImageBank {imageBankImageId = x} -> x) . entityVal))
            (\ (Entity key_ak3V value_ak3W) x_ak3X
               -> (Entity key_ak3V)
                    (case value_ak3W of
                       ImageBank {imageBankNewsId = imageBankNewsId}
                         -> ImageBank
                              {imageBankNewsId = imageBankNewsId, imageBankImageId = x_ak3X}))
    instance ToBackendKey Database.Persist.SqlBackend.Internal.SqlBackend ImageBank where
      toBackendKey = \ ImageBankKey {unImageBankKey = x} -> x
      fromBackendKey = ImageBankKey
    instance OnlyOneUniqueKey News where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey News where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance GHC.TypeLits.TypeError (NoUniqueKeysError Image) =>
             OnlyOneUniqueKey Image where
      onlyUniqueP _ = error "impossible"
    instance GHC.TypeLits.TypeError (MultipleUniqueKeysError Image) =>
             AtLeastOneUniqueKey Image where
      requireUniquesP _ = error "impossible"
    instance OnlyOneUniqueKey ImageBank where
      onlyUniqueP = (head . persistUniqueKeys)
    instance AtLeastOneUniqueKey ImageBank where
      requireUniquesP = (Data.List.NonEmpty.fromList . persistUniqueKeys)
    instance SymbolToField "id" News (Database.Persist.Key News) where
      symbolToField = NewsId
    instance SymbolToField "title" News T.Text where
      symbolToField = NewsTitle
    instance SymbolToField "id" Image (Database.Persist.Key Image) where
      symbolToField = ImageId
    instance SymbolToField "header" Image T.Text where
      symbolToField = ImageHeader
    instance SymbolToField "base64" Image T.Text where
      symbolToField = ImageBase64
    instance SymbolToField "id" ImageBank (Database.Persist.Key ImageBank) where
      symbolToField = ImageBankId
    instance SymbolToField "newsId" ImageBank NewsId where
      symbolToField = ImageBankNewsId
    instance SymbolToField "imageId" ImageBank ImageId where
      symbolToField = ImageBankImageId
    entityDefListFormigrateAll :: [EntityDef]
    entityDefListFormigrateAll
      = [entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy News),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy Image),
         entityDef (Data.Proxy.Proxy :: Data.Proxy.Proxy ImageBank)]
    migrateAll :: Database.Persist.Sql.Migration.Migration
    migrateAll = PTH.migrateModels entityDefListFormigrateAll
